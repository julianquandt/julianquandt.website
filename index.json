[{"authors":["admin"],"categories":null,"content":"A PhD student in the Behaviour Regulation and Change (BRACE) Lab\rat the Behavioural Science Institute\rat Radboud University\rin Nijmegen working with Harm Veling (main advisor/co-promotor)\r, Rob Holland (promotor)\r, and Bernd Figner (co-promotor)\r.\nIn my PhD project, I aim to increase our understanding confidence in value-based decision-making. The questions that keep me awake at night are:\n How do people retrieve value-information when they make a decision? How does this retrieval of information relate to people's confidence in their decisions? This is, what does high or low confidence in VBD reflect? Why are people confident about some choices while they are uncertain of others?  Aside from working on my dissertation, I also enjoy working on my skills in statistics, statistical modelling and programming (R and python). Moreover, I am an enthusiast of open science, open access, open source and open bars.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://julianquandt.com/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"A PhD student in the Behaviour Regulation and Change (BRACE) Lab\rat the Behavioural Science Institute\rat Radboud University\rin Nijmegen working with Harm Veling (main advisor/co-promotor)\r, Rob Holland (promotor)\r, and Bernd Figner (co-promotor)\r.\nIn my PhD project, I aim to increase our understanding confidence in value-based decision-making. The questions that keep me awake at night are:\n How do people retrieve value-information when they make a decision?","tags":null,"title":"Julian Quandt","type":"authors"},{"authors":[],"categories":["Power Analysis"],"content":"\r\r\rThe Power Analysis by simulation in R for really any design - Part III\rFootnotes\r\r\r\r\r\rClick HERE to download the .Rmd file\nThis blog is also available on R-Bloggers\r\rbutton.btn.collapsed:before\r{\rcontent:'+' ;\rdisplay:block;\rwidth:15px;\r}\rbutton.btn:before\r{\rcontent:'-' ;\rdisplay:block;\rwidth:15px;\r}\r\rThe Power Analysis by simulation in R for really any design - Part III\rThis is Part III of my tutorial on how to do power-analysis by simulation.\rIn Part I, we saw how to do a simulation for a simple toy-example with a coin-toss.\rIn part II we learned how to simulate univariate and multivariate normal-distributions, specify our assumptions about the expected effect and test our simulated data with different t-tests.\rIn this part, we will focus on how we can write a flexible test for any model by making use of the fact that many statistical standard methods (e.g. t-test, ANOVA) can be rewritten as a linear model.\rThis way, no matter what situation we find ourselves in, we will always be able to use the same power-simulation with only slight changes.\nIn part IV we will learn how to apply this technique to complicated designs such as linear mixed-effects models and generalized mixed-effects models.\nRevisiting the t-test: just another linear model\rBefore I even start with this topic, I want to point out that I took much of the information I present here from Jonas Kristoffer Lindelov’s fantastic blog post “Common statistical tests are linear models (or: how to teach stats)”.\rIf you have not read it yet, you should definitely do so, either now or after you finished this part of the tutorial.\rSeriously, it is a great blog-post that inspired me to write up this part of the tutorial in a similar way in which we want to learn one flexible method of data-simulation rather than changing what we are doing for each different situation.\nOk so what does it mean to say that, for instance, a t-test is just a linear model?\rFirst of all, here is a quick reminder about the linear model with a quick example:\n\\[\ry_i = \\beta_0 + \\beta_1x_i\r\\]\nThe above formula states that each value of y (the little i can be read as “each”) can be described by adding a value \\(\\beta_0\\) and the product of \\(beta_0 \\times x\\).\rNow, how does this relate to the t-test? Again, if you want a more in-depth discussion read the blog-post above.\rTo demonstrate the point, lets revisit the example from part II of this tutorial.\rWe had 2 groups and we assumed that one group can be described as group1 = normal(0,2) and the other group can be described as group2 = normal(1,2).\rNow if we want to test whether the difference in means is significant, we can run a independent-samples t-test.\rHowever, if we rephrase the problem what we want to know whether group membership (whether you belong to group1 or group2; the \\(x\\) variable in this case) significantly predicts the person’s score (y in this case).\rTo do so, we can just assume let \\(beta_0\\) describe the mean of, say, group1 in this case.\rIf we do this and if we re-write model above to predict the mean of group1, it looks the following way:\n\\[\rM_{group1} = M_{group1}+\\beta_1\\times x\r\\]\nWhat should \\(\\beta_1\\) and \\(x\\) be in this case?\rWell, as we already have the mean of group1 on the right side in the term that was previously \\(beta_0\\), we do not want to add anything to it.\rThus, if someone member from group1, to predict the mean-score we should have an observed value for group-membership of 0.\rThis way, the formula becomes\n\\[\rM_{group1} = M_{group1}+\\beta_1\\times 0\r\\]\nand the \\(\\beta_1\\) term becomes 0 entirely. Note that we of course do not know the mean of group1 as we will simulate it.\r\\(\\beta_0\\) (or \\(M_{group1}\\) here) is a parameter, i.e. something that we want the model to estimate because we do not know it.\nWhat if we want to describe the mean of a person in group2?\rWe can do this by just adding something to the mean of group1, namely the difference between the two groups.\rIn other words, we can describe the mean of group2 by saying its the mean of group1 + the difference of their means times x:\n\\[\rM_{group2} = M_{group1}+(M_{group2}-M_{group1})\\times x\r\\]\nWhat should \\(\\beta_1\\) and \\(x\\) be now?\rJust like \\(\\beta_0\\), our new mean-difference parameter \\(\\beta_1\\) is an unknown that depends on our simulated means and will be estimated by the model.\r\\(x\\) on the other hand should be 1, because if someone is from group2 we want the predicted mean of that person to be the mean of group1 + 1 times the difference between group1 and group2.\nTherefore if someone is from group2 our model becomes:\n\\[\rM_{group2} = M_{group1}+(M_{group2}-M_{group1})\\times 1\r\\]\nWhat we just did is so-called dummy coding, i.e. we made a new dummy variable that tells us someone’s group membership:\n\r0 if the person is in group1\r1 if the person is in group2\r\rIf we use this dummy variable in the linear model we can do exactly the same test that we did with the t-test earlier.\rLet me demonstrate with the exact same groups that we simulated in the beginning of part II of this tutorial.\nset.seed(1234)\rgroup1 \u0026lt;- rnorm(30, 1, 2)\rgroup2 \u0026lt;- rnorm(30, 0, 2)\rNow we can run the independent-samples t-test again, yielding the same results as in part II.\nt.test(group1, group2, paired = FALSE, var.equal = TRUE, conf.level = 0.9)\r## ## Two Sample t-test\r## ## data: group1 and group2\r## t = 3.1402, df = 58, p-value = 0.002656\r## alternative hypothesis: true difference in means is not equal to 0\r## 90 percent confidence interval:\r## 0.7064042 2.3143690\r## sample estimates:\r## mean of x mean of y ## 0.407150 -1.103237\rTo do our linear model analysis instead, we first have to create a data-frame that contains the 2 groups and tells us about their group membership.\rIn other words we will make a data-set that has the variables score which are the values in the vectors of group1 and group2 and a variable group that will be 0 if a person is from group1 and 1 if the person is from group2.\rIn this case, after putting the data together, we create a dummy variable with ifelse a function that you can read like: if the group variable has value “group1” in a certain row, then make dummy_group in that row = 0, else make it 1.\nnames(group1) \u0026lt;- rep(\u0026quot;group1\u0026quot;, length(group1)) # name the vectors to use the names as the group variable\rnames(group2) \u0026lt;- rep(\u0026quot;group2\u0026quot;, length(group2))\rlm_groupdat \u0026lt;- data.frame(score = c(group1,group2), group = c(names(group1), names(group2))) # make data-set from scores and names\rlm_groupdat$dummy_group \u0026lt;- ifelse(lm_groupdat$group == \u0026quot;group1\u0026quot;, 0, 1) # create dummy variable \rNow we can use this to run our linear model with the lm function.\rIn case you have not used it before, we indicate the intercept, i.e. \\(beta_0\\) with a 1 in this case, to tell the model that we want 1 times \\(beta_0\\) in there and tell it that we want dummy_group times the difference between the groups, \\(beta_1\\) in there.\rThe code looks like this:\nsummary(lm(score ~ 1+ dummy_group, dat = lm_groupdat)) # use summary function to get p-values\r## ## Call:\r## lm(formula = score ~ 1 + dummy_group, data = lm_groupdat)\r## ## Residuals:\r## Min 1Q Median 3Q Max ## -4.0985 -1.1327 -0.4088 0.7360 5.4245 ## ## Coefficients:\r## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 0.4072 0.3401 1.197 0.23612 ## dummy_group -1.5104 0.4810 -3.140 0.00266 **\r## ---\r## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1\r## ## Residual standard error: 1.863 on 58 degrees of freedom\r## Multiple R-squared: 0.1453, Adjusted R-squared: 0.1306 ## F-statistic: 9.861 on 1 and 58 DF, p-value: 0.002656\rFirst let us see what the estimates mean in this case.\rThe intercept has an estimate of .4072.\rAs we said earlier, this, \\(\\beta_0\\), should be the group-mean of group1 and indeed wee see that mean(group1) = 0.40715 gives us the same result.\rWhat is the second estimate, \\(\\beta_1\\) for dummy_group should yield the difference between the means.\rWe can confirm that mean(group2)-mean(group1) = -1.5103866 gives us the same result in this case.\rFurther we see that the DFs, t-value and p-value are identical to the earlier t-test.\nThis method would also work with the one-sample t-test approach and the paired-samples t-test approach from part II of the tutorial, but I will leave it as an exercise to the reader to try it out, as I do want to move on to other situations.\rAgain (cannot mention this enough) make sure you head to Jonas Kristoffer Lindelov’s blog post if you want to see how to do this or if you want to read more on this topic.\n\rSimulating a 2x2 between-subject ANOVA (as a linear model)\rHow to specify raw effect-sizes with no prior data\rIn this part, I will give an example of how we could specify prior effect-sizes for our research design given we have not collected any prior data and are only working with assumptions.\nOk time to move on to more sophisticated designs.\rImagine you are interested in students attitude towards smoking and how it depends on the medium of the message and the focus of the message.\rMore precisely we want to know whether people’s attitude is different after seeing a visual anti-smoking message (these pictures on the package) vs a text-message (the text belonging to that picture).\rMoreover, we are interested in whether the attitude that people report is different after seeing a message that regards the consequences on other people (e.g. smoking can harm your loved ones) as compared to yourself (smoking can cause cancer).\rThus we have the following design\nDisclaimer: This is just an example that i made up so it does not reflect any real-life effect and one might easily argue a different way as this RQ is not based on any underlying theory but it allows me to demonstrate the point without further elaborating on any psychological theory.\nDV: attitude towards smoking (0-100)\rIV1: medium (text vs. visual)\rIV2: focus (internal vs. external)\nThis is, there are 4 groups:\n\rgroup_TI will receive text-messages that are internal\rgroup_TE will receive text-messages that are external\rgroup_VI will receive visual messages that are internal\rgroup_VE will receive visual messages that are external\r\rLets assume that we expect that people’s attitude will be more negative after seeing a visual rather than text message if the focus is internal (i.e. the message is about yourself) because it might be difficult to imagine that oneself would get cancer after reading a text but seeing a picture might cause fear regardless.\rFor the external focus on the other hand, we expect a more negative attitude after reading a text as compared to seeing a picture, as it might have more impact on attitude to imagine a loved one get hurt than seeing a stranger in a picture suffering from the consequences of second-hand smoking.\rFurthermore, we expect that the internal focus messages will be related to lower attitudes compared to the external focus messages on average but we expect no main-effect of picture vs. text-messages.\nThus, we expect:\n\rno main-effect of medium\rmain-effect of focus\rcrossover-interaction of medium x focus\r\rAt this point, in my opinion it is more difficult to work with standardized effect-sizes like partial correlations e.g. in this case then just to specify everything on the response scale directly.\rA first good step is to visualize some rough means that show the desired behavior that we described in words earlier and see where we are going, starting with the main-effects.\nWe expect a main effect of focus so the means of the 2 internal groups should be lower (more negative attitude) than the means of the external groups.\rFor example, we could make the overall mean of the internal focus groups (group_TI and group_VI) 20 and the mean of the external groups (group_TE and group_VE) 50.\rNote how this would already reflect the main-effect but also a belief that the smoking-attitudes are on average quite negative as we assume both means to be on the low end of the scale.\rHowever, for now we just want to make a rough guess and we might adjust our expectations in a second.\nOk so now what we have to do is specify the means for the media groups in a way that reflects our interaction hypothesis.\rWe could for example assume that the mean of group_TI is 30 while the mean of group_VI is 10 and we could assume that the mean of group_TE is 40 and the mean of group_VE is 60.\nThis way, for the internal groups, visual messages are more negative than texts, while for the external groups texts are more negative than visual messages.\nWe could plot this to see how it looks like\nfocus \u0026lt;- rep(c(\u0026quot;internal\u0026quot;, \u0026quot;external\u0026quot;), each = 2)\rmedia \u0026lt;- rep(c(\u0026quot;text\u0026quot;, \u0026quot;visual\u0026quot;), times = 2)\rmean_TI \u0026lt;- 50\rmean_VI \u0026lt;- 20\rmean_TE \u0026lt;- 30\rmean_VE \u0026lt;- 60\rpd \u0026lt;- data.frame(score = c(mean_TI, mean_VI, mean_TE, mean_VE), focus = focus, media = media)\rinteraction.plot(pd$focus, pd$media, pd$score, ylim = c(0,100))\rmean(pd$score[pd$focus == \u0026quot;internal\u0026quot;]) != mean(pd$score[pd$focus == \u0026quot;external\u0026quot;])\r## [1] TRUE\rmean(pd$score[pd$media == \u0026quot;text\u0026quot;]) == mean(pd$score[pd$media == \u0026quot;visual\u0026quot;])\r## [1] TRUE\rWe can see that the above situation satisfies all things that we wanted to specify:\n\rThe means of the two focus groups are not the same so that internal are lower than external values if we pool over the media conditions.\rThe mean for both media conditions are the same so there is no main-effect.\rThe lines cross over showing the interaction that we wanted.\r\rHowever, three problems remain here.\rFirst of all, the simple slope for the visual messages is steeper than the simple slope for the text messages, which is not something we specified in our hypotheses beforehand.\rIt rather comes as a side-effect of that we want our internal means to be lower than the external means but we also want the visual messages to be more impactful in the internal condition while our text-messages should be more impactful on the external conditions.\rDo we find this plausible or do we think this would rather be the other way around?\n\rThis a good point for a short reflection: You might already be overwhelmed how complicated power-analysis by simulation already is with these still relatively simple designs.\rHowever, notice that e.g. the follow-up tests for the slopes are things that we can care about but we do not need to care about them.\rOur interaction-hypothesis is mainly interested in whether the difference in scores between the visual and the text messages when comparing the internal focus group is the same as the difference for the external groups.\rAs this is clearly not the case in this example, we are good to go and test the interaction hypothesis.\rHowever, if we clearly are interested in the simple slopes and have hypotheses about them, we can put it in our simulation, and that of course urges us to think some more but it is a great tool to see whether we actually thought about everything, as this might be a point that would have slipped our attention entirely when running a classical power-analysis and pre-registering the overall interaction only.\rNow, we can think about it if we want to or continue by saying that for now we only want to specify the interaction.\r\rLet us assume that we are fine with the fact that visual messages differ somewhat more than text messages.\rHowever, the numbers we have chosen so far are all but plausible.\rIn this case, if we want to come up with more plausible numbers it is good if, instead of thinking about means directly, we make assumptions about how each of the group-means will differ from the overall population mean.\rFor instance, we can assume in this case that all groups might actually have a more negative attitude towards smoking after seeing the text or visual message no matter whether they were externally and internally (ideally we would of course use a pre-post test design but lets keep that for later).\rThus, we could for example assume that (having no better data on this) people are on average indifferent about smoking, therefore assuming the population mean is 50.\rNow lets see what this would imply in terms of change scores for the numbers above:\nchange_TI \u0026lt;- mean_TI-50\rchange_VI \u0026lt;- mean_VI-50\rchange_TE \u0026lt;- mean_TE-50\rchange_VE \u0026lt;- mean_VE-50\rbarplot(c(change_TI, change_VI, change_TE, change_VE), names.arg = c(\u0026quot;TI\u0026quot;, \u0026quot;VI\u0026quot;, \u0026quot;TE\u0026quot;, \u0026quot;VE\u0026quot;))\rThus, this does not seem entirely plausible.\rThe VE group increases in their attitude towards cigarettes compared to the assumed population mean and the TI group does not change at all.\rThis is not what we would expect.\rHowever, as we want to keep the rank-order of the bars the same (i.e. order of difference-magnitudes between the groups should stay the same as above) we will start with the highest bar here and adjust it to a position where it would actually make sense compared to the population mean.\rLets assume that the looking at these external pictures would actually decrease the population mean of smoking attitude by 3 points on average.\rThis is just a consequence of that I think an intervention of this would be rather weak as most people do not see these pictures for the first time and also might not be influences so much by looking at them to begin with.\rThus my mean of group_VE becomes 47.\nNext, when looking at the TI group, I think hat this group might decrease more strongly compared to the other group (it is internal), so the new mean after reading texts about yourself might be 45 in this case.\nThe next group is the TE group which should be lower than the other two groups before. However given that it is also an external group, and I expect internal messages to work better, it is probably not much stronger than the TI group, so I will assume the mean is 43.\nLast, the strongest of the changes I would probably expect for the VI group so I can assume that the change might be 10 points in this case so that their mean will become 40.\nLet us plot these new means again.\nfocus \u0026lt;- rep(c(\u0026quot;internal\u0026quot;, \u0026quot;external\u0026quot;), each = 2)\rmedia \u0026lt;- rep(c(\u0026quot;text\u0026quot;, \u0026quot;visual\u0026quot;), times = 2)\rmean_TI \u0026lt;- 43\rmean_VI \u0026lt;- 40\rmean_TE \u0026lt;- 45\rmean_VE \u0026lt;- 47\rpd \u0026lt;- data.frame(score = c(mean_TI, mean_VI, mean_TE, mean_VE), focus = focus, media = media)\rinteraction.plot(pd$focus, pd$media, pd$score, ylim = c(0,100))\rmean(pd$score[pd$focus == \u0026quot;internal\u0026quot;]) != mean(pd$score[pd$focus == \u0026quot;external\u0026quot;])\r## [1] TRUE\rmean(pd$score[pd$media == \u0026quot;text\u0026quot;]) == mean(pd$score[pd$media == \u0026quot;visual\u0026quot;])\r## [1] FALSE\rNote that in this new example, technically there is a difference between the two media groups on average but it is only .50 points, so I would argue that it is small enough to represent our assumption of “no” effect, as in real-life “no” effect in terms of a difference being actually 0 is rather rare anyway.\nOk, so after rule-of-thumbing our way through all the different group-means, we have to consider what standard deviation we find plausible in this situation.\nIt is plausible, that the intervention that we are administering might not directly influence the spread in each group, so we might as well assume that the spread is the same in each group.\rWhat should we choose in this case?\rLet us think about the population.\rWe said that people would in average be indifferent about smoking with a mean of 50 on a 100-point scale.\rHow big should the spread on this scale be, i.e. between which values do we assume most people to be on this scale.\rIt is probably likely that most people will not have a very good attitude about smoking, say 80 or higher.\rThe lower end is more difficult to predict in this case, there might as well be more people that have a very negative opinion.\rIn fact, the distribution might be skewed rather than symmetric, with more people having very negative opinions and a rather long tail.\rIn any case, we will use this upper-limit assumption to come up with some reasonable standard-deviation.\rIf we start at 50 and we want most people to be \u0026lt; 80, we can set the 2-SD bound at 80 to get a standard-deviation of 15 (80-50)/2.\rThus let us assume that each of our groups has a standard-deviation of 15 points.\nThus our distributions that we would have are\ngroup_TI = normal(n, 43, 15)\rgroup_VI = normal(n, 40, 15)\rgroup_TE = normal(n, 45, 15)\rgroup_VE = normal(n, 47, 15)\rWith these groups we can now run an ANOVA.\rBefore getting into the power-analysis part lets just have a look what would happen if we had 10,000 people per group and would use this in our ANOVA.\rFirst we will do this by using the aov_car function from the afex package.\n## Loading required package: afex\r## Loading required package: lme4\r## Loading required package: Matrix\r## Registered S3 methods overwritten by \u0026#39;car\u0026#39;:\r## method from\r## influence.merMod lme4\r## cooks.distance.influence.merMod lme4\r## dfbeta.influence.merMod lme4\r## dfbetas.influence.merMod lme4\r## ************\r## Welcome to afex. For support visit: http://afex.singmann.science/\r## - Functions for ANOVAs: aov_car(), aov_ez(), and aov_4()\r## - Methods for calculating p-values with mixed(): \u0026#39;KR\u0026#39;, \u0026#39;S\u0026#39;, \u0026#39;LRT\u0026#39;, and \u0026#39;PB\u0026#39;\r## - \u0026#39;afex_aov\u0026#39; and \u0026#39;mixed\u0026#39; objects can be passed to emmeans() for follow-up tests\r## - NEWS: library(\u0026#39;emmeans\u0026#39;) now needs to be called explicitly!\r## - Get and set global package options with: afex_options()\r## - Set orthogonal sum-to-zero contrasts globally: set_sum_contrasts()\r## - For example analyses see: browseVignettes(\u0026quot;afex\u0026quot;)\r## ************\r## ## Attaching package: \u0026#39;afex\u0026#39;\r## The following object is masked from \u0026#39;package:lme4\u0026#39;:\r## ## lmer\rrequire(afex)\rn \u0026lt;- 1e5\rgroup_TI \u0026lt;- rnorm(n, 43, 15)\rgroup_VI \u0026lt;- rnorm(n, 40, 15)\rgroup_TE \u0026lt;- rnorm(n, 45, 15)\rgroup_VE \u0026lt;- rnorm(n, 47, 15)\rparticipant \u0026lt;- c(1:(n*4))\rfocus \u0026lt;- rep(c(\u0026quot;internal\u0026quot;, \u0026quot;external\u0026quot;), each = n*2)\rmedia \u0026lt;- rep(c(\u0026quot;text\u0026quot;, \u0026quot;visual\u0026quot;), each = n, times = 2)\raov_dat \u0026lt;- data.frame(participant = participant, focus = focus, media = media, score = c(group_TI, group_VI, group_TE, group_VE))\raov_car(score ~ focus*media+ Error(participant), data = aov_dat, type = 3)\r## Contrasts set to contr.sum for the following variables: focus, media\r## Anova Table (Type 3 tests)\r## ## Response: score\r## Effect df MSE F ges p.value\r## 1 focus 1, 399996 225.28 8811.28 *** .02 \u0026lt;.0001\r## 2 media 1, 399996 225.28 126.75 *** .0003 \u0026lt;.0001\r## 3 focus:media 1, 399996 225.28 2703.27 *** .007 \u0026lt;.0001\r## ---\r## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;+\u0026#39; 0.1 \u0026#39; \u0026#39; 1\rWe see that, if we collect 10,000 people per group, everything would be significant with focus having the biggest effect (look at the ges column in the table for generalized eta-squared values) and with media having the smallest effect (in fact close to 0 as we wanted).\rThat even the main-effect for media is still significant just shows that this happens even with very small deviations from the exact null-hypothesis in these huge samples.\nNote that again we could rewrite this anova as a dummy-coded linear model as:\n\\[\rscore_i = \\beta_0 + \\beta_1X_1 + \\beta_2X_2 + \\beta_3X_1X_2 \\]\nBy making dummy-variables we can code this in lm\naov_dat$focus_dummy \u0026lt;- ifelse(aov_dat$focus == \u0026quot;internal\u0026quot;, 0 , 1)\raov_dat$media_dummy \u0026lt;- ifelse(aov_dat$media == \u0026quot;text\u0026quot;, 0 , 1)\rlm_int \u0026lt;- lm(score ~ 1 + focus_dummy + media_dummy + focus_dummy:media_dummy, data = aov_dat)\rFrom the estimates that we get here we see how the model is estimated:\n\\(\\beta_0\\) = mean(group_TI) as both dummies are 0 for this one.\r\\(\\beta_1\\) = mean(group_TE)-mean(group_TI) as the focus variable changes from 0 to 1 within the text-group\r\\(\\beta_2\\) = mean(group_VI)-mean(group_TI) as the media variable changes from 0 to 1 within the internal focus group\r\\(\\beta_3\\) = mean(group_VE)-mean(group_TE)+mean(group_TI)-mean(group_VI) to see what a crossover of the variables (i.e. the interaction) compares to \\(\\beta_0\\)\nIf we want to test whether the effect of the interaction, for instance is significant, we can conduct an ANOVA for the interaction to see how the model with the interaction compares to a model without the interaction, which we do in the following code-block by fitting a model that does not have the interaction in their and compare it with the anova function.\nlm_null \u0026lt;- lm(score ~ 1 + focus_dummy + media_dummy, data = aov_dat)\ranova(lm_null, lm_int)\r## Analysis of Variance Table\r## ## Model 1: score ~ 1 + focus_dummy + media_dummy\r## Model 2: score ~ 1 + focus_dummy + media_dummy + focus_dummy:media_dummy\r## Res.Df RSS Df Sum of Sq F Pr(\u0026gt;F) ## 1 399997 90721027 ## 2 399996 90112027 1 609000 2703.3 \u0026lt; 2.2e-16 ***\r## ---\r## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1\rAgain, we find the same F-value and p-value as before, which should not be surprising considering we did the same test.\rI will leave it to you which of the two methods, i.e. using the regular aov functions or specifying linear models, you prefer.\rAn obvious advantage of the aov function is that we do not have to specify nested models but it is also sort of a black-box approach, while in the linear models, we get estimated effects and can see whether the model does actually behaves as we would expect.\n\rQuick detour: Contrast Coding and Centering\rGoing back to the aov_car output above, you might have noticed that the function informed us that it set [contrasts] to contr.sum for the following variables: focus, media.\rWhat does this mean?\rIt means that instead of using dummy-coding as we did when we created the dummy variables, it instead assigned a -1 to a level of the variable while setting a 1 to the other level.\rWe can check what this looks like if we set it manually to the variables in the data-set.\naov_dat$media_sum \u0026lt;- factor(aov_dat$media)\rcontrasts(aov_dat$media_sum) \u0026lt;- contr.sum(2)\rcontrasts(aov_dat$media_sum)\r## [,1]\r## text 1\r## visual -1\raov_dat$focus_sum \u0026lt;- factor(aov_dat$focus)\rcontrasts(aov_dat$focus_sum) \u0026lt;- contr.sum(2)\rcontrasts(aov_dat$focus_sum)\r## [,1]\r## external 1\r## internal -1\rIf we compare this to our dummy variables:\nmedia:\n\rtext = 0\rvisual = 1\r\rfocus:\n\rinternal = 0\rexternal = 1\r\rLet’s re-run the linear model with these variables and see what we get.\naov_dat$media_sum_num \u0026lt;- ifelse(aov_dat$media == \u0026quot;text\u0026quot;, 1, -1)\raov_dat$focus_sum_num \u0026lt;- ifelse(aov_dat$focus == \u0026quot;external\u0026quot;, 1, -1)\rlm_int_sum \u0026lt;- lm(score ~ 1 + focus_sum_num + media_sum_num + focus_sum_num:media_sum_num, data = aov_dat)\rlm_int_sum\r## ## Call:\r## lm(formula = score ~ 1 + focus_sum_num + media_sum_num + focus_sum_num:media_sum_num, ## data = aov_dat)\r## ## Coefficients:\r## (Intercept) focus_sum_num ## 43.7756 2.2277 ## media_sum_num focus_sum_num:media_sum_num ## 0.2672 -1.2339\rlm_null_sum \u0026lt;- lm(score ~ 1 + focus_sum_num + media_sum_num, data = aov_dat)\rlm_null_sum\r## ## Call:\r## lm(formula = score ~ 1 + focus_sum_num + media_sum_num, data = aov_dat)\r## ## Coefficients:\r## (Intercept) focus_sum_num media_sum_num ## 43.7756 2.2277 0.2672\ranova(lm_null_sum,lm_int_sum)\r## Analysis of Variance Table\r## ## Model 1: score ~ 1 + focus_sum_num + media_sum_num\r## Model 2: score ~ 1 + focus_sum_num + media_sum_num + focus_sum_num:media_sum_num\r## Res.Df RSS Df Sum of Sq F Pr(\u0026gt;F) ## 1 399997 90721027 ## 2 399996 90112027 1 609000 2703.3 \u0026lt; 2.2e-16 ***\r## ---\r## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1\rWe see immediately that the estimates changed somewhat.\rNow, for example the intercept represents the mean of all 4 other means (i.e. the grand mean):\nmean(c(mean(group_TI), mean(group_TE), mean(group_VE), mean(group_VI))) = 43.775609.\nand the first estimate represents the difference of each focus level from that grand-mean, for the “internal groups this is”\nmean(c(mean(group_TI), mean(group_VI)))-mean(c(mean(group_TI), mean(group_TE), mean(group_VE), mean(group_VI))) = -2.2276811\nand for the external groups this is\nmean(c(mean(group_TE), mean(group_VE)))-mean(c(mean(group_TI), mean(group_TE), mean(group_VE), mean(group_VI))) = 2.2276811\nrespectively.\nWhy would we use this coding-scheme in the linear model instead of the other one?\rThe p-value for the interaction is exactly the same in both cases.\rHowever, if we compare the p-values of main-effects here, we will see how they differ.\nFor instance, if we tell aov_car that we want to keep our dummy-coding instead of changing it, we can see how the two outputs differ.\naov_car(score ~ focus*media+ Error(participant), data = aov_dat, type = 3, afex_options(\u0026quot;check_contrasts\u0026quot; = FALSE))\r## Anova Table (Type 3 tests)\r## ## Response: score\r## Effect df MSE F ges p.value\r## 1 focus 1, 399996 225.28 876.77 *** .002 \u0026lt;.0001\r## 2 media 1, 399996 225.28 829.66 *** .002 \u0026lt;.0001\r## 3 focus:media 1, 399996 225.28 2703.27 *** .007 \u0026lt;.0001\r## ---\r## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;+\u0026#39; 0.1 \u0026#39; \u0026#39; 1\rAs you can see, these results are a bit weird, as we seem to have the same effect-size for both main-effects, but did we not simulate a much bigger effect of focus compared to media1?\rSomething seems to be off here.\rThis has to do with the fact that in classical dummy-coding (also called treatment coding) you cannot easily test main-effects when interactions are present in the model.\rFor the interaction on the other hand it does not matter.\rYou can read more about this in this blog post by Dale Barr but the take-home message here is that, whenever we have an interaction in our model, we want to use sum-to-zero coding rather than dummy-coding.\rThis is why the results of the last anova do not show the behavior that we simulated.\nThus, for the rest of the tutorial we will use sum-to-zero contrasts coding.\n\rRunning the power-analysis\rI will use the lm way here as it is much faster (about 8 times faster in a quick test) than the aov_car method.\rTo track our power, we can directly extract p-values from the anova object, just as we did for the t.test objects earlier.\nThe only thing that we still need to do is specify our test criteria.\rImagine that this time we are hired by the government and are asked to evaluate which of the health-warnings on cigarette packages would work best in which of the situations that we investigate.\rThey gave us a lot of money to do this, but they do not want to draw any conclusions that are unwarranted as implementing new laws costs a lot of money.\rThus, we want to set our alpha-level quite conservatively at \\(\\alpha = .001\\) to only make a non-warranted claim about the interaction effect in 1 of every 1,000 experiments.\rMoreover, we also want to be sure that we actually detect an effect and therefore want to keep our power high at 95% to be sure that if there is an interaction we would detect it in 19 out of 20 cases.\nNow we have everything that we need to set up the code-chunk below to run a power-analysis similar to the ones we have been running previously, just this time with an ANOVA coded as a linear model.\rIf we would again try out every sample-size, this would take a very long time until we reach our power criterion and we would probably still be sitting here tomorrow or the day after.\rIn these cases, it makes sense to run a two-stage power analysis in which we, in the first stage, try out various sample-sizes with a very low resolution (e.g. n = 10, n = 100, n = 200) etc. to get a rough idea of where we can expect our loop to end.\rAfterwards, we will increase the resolution to find how many participants exactly we would need.\rThe first step with the low resolution is performed below.\nset.seed(1)\rn_sims \u0026lt;- 1000 # we want 1000 simulations\rp_vals \u0026lt;- c()\rpower_at_n \u0026lt;- c(0) # this vector will contain the power for each sample-size (it needs the initial 0 for the while-loop to work)\rn \u0026lt;- 100 # sample-size and start at 100 as we can be pretty sure this will not suffice for such a small effect\rn_increase \u0026lt;- 100 # by which stepsize should n be increased\ri \u0026lt;- 2\rpower_crit \u0026lt;- .95\ralpha \u0026lt;- .001\rwhile(power_at_n[i-1] \u0026lt; power_crit){\rfor(sim in 1:n_sims){\rgroup_TI \u0026lt;- rnorm(n, 43, 15)\rgroup_VI \u0026lt;- rnorm(n, 40, 15)\rgroup_TE \u0026lt;- rnorm(n, 45, 15)\rgroup_VE \u0026lt;- rnorm(n, 47, 15)\rparticipant \u0026lt;- c(1:(n*4))\rfocus \u0026lt;- rep(c(\u0026quot;internal\u0026quot;, \u0026quot;external\u0026quot;), each = n*2)\rmedia \u0026lt;- rep(c(\u0026quot;text\u0026quot;, \u0026quot;visual\u0026quot;), each = n, times = 2)\raov_dat \u0026lt;- data.frame(participant = participant, focus = focus, media = media, score = c(group_TI, group_VI, group_TE, group_VE))\raov_dat$media_sum_num \u0026lt;- ifelse(aov_dat$media == \u0026quot;text\u0026quot;, 1, -1) # apply sum-to-zero coding\raov_dat$focus_sum_num \u0026lt;- ifelse(aov_dat$focus == \u0026quot;external\u0026quot;, 1, -1) lm_int \u0026lt;- lm(score ~ 1 + focus_sum_num + media_sum_num + focus_sum_num:media_sum_num, data = aov_dat) # fit the model with the interaction\rlm_null \u0026lt;- lm(score ~ 1 + focus_sum_num + media_sum_num, data = aov_dat) # fit the model without the interaction\rp_vals[sim] \u0026lt;- anova(lm_int, lm_null)$`Pr(\u0026gt;F)`[2] # put the p-values in a list\r}\rprint(n)\rpower_at_n[i] \u0026lt;- mean(p_vals \u0026lt; alpha) # check power (i.e. proportion of p-values that are smaller than alpha-level of .10)\rnames(power_at_n)[i] \u0026lt;- n\rn \u0026lt;- n+n_increase # increase sample-size by 100 for low-resolution testing first\ri \u0026lt;- i+1 # increase index of the while-loop by 1 to save power and cohens d to vector\r}\r## [1] 100\r## [1] 200\r## [1] 300\r## [1] 400\r## [1] 500\r## [1] 600\r## [1] 700\r## [1] 800\r## [1] 900\rpower_at_n \u0026lt;- power_at_n[-1] # delete first 0 from the vector\rplot(as.numeric(names(power_at_n)), power_at_n, xlab = \u0026quot;Number of participants per group\u0026quot;, ylab = \u0026quot;Power\u0026quot;, ylim = c(0,1), axes = TRUE)\rabline(h = .95, col = \u0026quot;red\u0026quot;)\rWe see that at roughly 900 participants our loop ran into a situation where we have sufficient power.\rThank god we did not do this 1-by-1.\rNow we can have a closer look at sample-sizes between 800 and 900.\rProbably, at this sample-size it does not really matter whether we calculate +/- 10 participants in terms of budget, so we can start at 800 and increase in steps of 10 and instead increase the simulation-number per sample-size to 10,000 to get even more precise results for each particular sample-size, as this is a rather important power-analysis impact-wise.\rAfterwards, if we really wanted to we could of course run a third round between the last two 10-people cutoffs and increase the sample-size by 1 to reach an exact sample-size.\nset.seed(1)\rn_sims \u0026lt;- 10000 # we want 10000 simulations\rp_vals \u0026lt;- c()\rpower_at_n \u0026lt;- c(0) # this vector will contain the power for each sample-size (it needs the initial 0 for the while-loop to work)\rdelta_r2s\u0026lt;- c()\rdelta_r2s_at_n \u0026lt;- c(0)\rn \u0026lt;- 800 # sample-size and start at 800 as we can be pretty sure this will not suffice for such a small effect\rn_increase \u0026lt;- 10 # by which stepsize should n be increased\ri \u0026lt;- 2\rpower_crit \u0026lt;- .95\ralpha \u0026lt;- .001\rwhile(power_at_n[i-1] \u0026lt; power_crit){\rfor(sim in 1:n_sims){\rgroup_TI \u0026lt;- rnorm(n, 43, 15)\rgroup_VI \u0026lt;- rnorm(n, 40, 15)\rgroup_TE \u0026lt;- rnorm(n, 45, 15)\rgroup_VE \u0026lt;- rnorm(n, 47, 15)\rparticipant \u0026lt;- c(1:(n*4))\rfocus \u0026lt;- rep(c(\u0026quot;internal\u0026quot;, \u0026quot;external\u0026quot;), each = n*2)\rmedia \u0026lt;- rep(c(\u0026quot;text\u0026quot;, \u0026quot;visual\u0026quot;), each = n, times = 2)\raov_dat \u0026lt;- data.frame(participant = participant, focus = focus, media = media, score = c(group_TI, group_VI, group_TE, group_VE))\raov_dat$media_sum_num \u0026lt;- ifelse(aov_dat$media == \u0026quot;text\u0026quot;, 1, -1)\raov_dat$focus_sum_num \u0026lt;- ifelse(aov_dat$focus == \u0026quot;external\u0026quot;, 1, -1)\rlm_int \u0026lt;- lm(score ~ 1 + focus_sum_num + media_sum_num + focus_sum_num:media_sum_num, data = aov_dat)\rlm_null \u0026lt;- lm(score ~ 1 + focus_sum_num + media_sum_num, data = aov_dat)\rp_vals[sim] \u0026lt;- anova(lm_null, lm_int)$`Pr(\u0026gt;F)`[2]\rdelta_r2s[sim]\u0026lt;- summary(lm_int)$adj.r.squared-summary(lm_null)$adj.r.squared\r}\rprint(n)\rpower_at_n[i] \u0026lt;- mean(p_vals \u0026lt; alpha) # check power (i.e. proportion of p-values that are smaller than alpha-level of .10)\rdelta_r2s_at_n[i] \u0026lt;- mean(delta_r2s)\rnames(power_at_n)[i] \u0026lt;- n\rnames(delta_r2s_at_n)[i] \u0026lt;- n\rn \u0026lt;- n+n_increase # increase sample-size by 100 for low-resolution testing first\ri \u0026lt;- i+1 # increase index of the while-loop by 1 to save power and cohens d to vector\r}\r## [1] 800\r## [1] 810\r## [1] 820\r## [1] 830\r## [1] 840\r## [1] 850\r## [1] 860\r## [1] 870\r## [1] 880\r## [1] 890\rpower_at_n \u0026lt;- power_at_n[-1] # delete first 0 from the vector\rdelta_r2s_at_n \u0026lt;- delta_r2s_at_n[-1] # delete first 0 from the vector\rAs you will notice when you run this yourself, this simulation already takes quite some time.\rLater, when we work with mixed models in part IV, we will see how we can run such a simulation on multiple processor-cores simultaneously to solve this problem to at least some extent.\nplot(as.numeric(names(power_at_n)), power_at_n, xlab = \u0026quot;Number of participants per group\u0026quot;, ylab = \u0026quot;Power\u0026quot;, ylim = c(0,1), axes = TRUE)\rabline(h = .95, col = \u0026quot;red\u0026quot;)\rThis power-curve looks a bit odd, as it looks almost flat.\rWhat this shows however, is that power is not increasing linearly but tends to increase faster at the beginning and slower towards reaching 1.\nIn any case, 890 people per group would be enough to reach our desired power of .95.\rNote how close this is to the 900 from our low-resolution simulation above, showing the merits of this approach.\rAlso note that the change in amount of variance explained \\(\\Delta R^2\\) only increases by about delta_r2s_at_n[length(delta_r2s_at_n)] = 0.0067977.\rWhether this ~0.6% is a meaningful amount of added variance explained to begin with and whether it is worth spending money in order to test about 3,500 people without even knowing what this attitude measure in this case even tells us in terms of smoking-behavior is a whole other question and cannot be answered with power-analysis (probably the answer would be that it is not so important though).\n\r\rAdding a Numeric Predictor\rIn this last bit of part III of this tutorial I want to demonstrate how we can add numeric predictors to our models as, so far, we only worked with factors.\rAgain, knowing how to re-specify an ANOVA as a linear model is helpful in this case if we have both, factorial and numerical predictors.\nWe could also assume that the effect that our predictors have depend on other factors.\rFor example, we could think that the more cigarettes a person smokes each day, the less effective any treatment would be independent of what strategy we would use.\rThus, if we assume that the aforementioned effect-sizes would be the expected value for a non-smoking population, including smokers would make this effect less pronounced.\rIn other words, the more a person smokes, the smaller the expected effect size for that person should be.\nHow do we do this?\rIf we reformulate our problem above we could say that if a person smokes 0 cigarettes a day she should get 100% of the expected effect (e.g. the decrease of 7 points in the internal text-group).\rNow, we can take the maximum amount of cigarettes that we think a person can smoke per day (or what we expect the 95% CI to be in a smoking population for instance).\rLet us say we assume this to be 36 cigarettes a day (about 2 packages).\rNow if we want a person that smokes 0 cigarettes to get the full 7 points and a person who smokes 36 cigarettes to get 0 percent of the effect, we can rewrite the effect like this\n\\[y{_i} = \\bar y \\times \\frac{max_{n}-n}{max_n}\\]\nor if we fill in the numbers for a non-smoker:\n\\[y{_i} = 7 \\times \\frac{36-0}{36} = 7\\]\nand someone who smokes 14 cigarettes a day:\n\\[y{_i} = 7 \\times \\frac{36-14}{36} = 5.64\\]\nThus, our effect of 7 points now depends on how much someone smokes.\nNow we have to come up with an assumption of how much people smoke in the population.\rA quick google search can tell us that, in the Netherlands, 23.1% of adults smoke.\rWe can also find that people who smoke consume ca. 11 cigarettes on average.\rThus, we will make a population in which 76.9 percent of the people do not smoke and 23.1 percent smokes 11 cigarettes on average.\rFor the cigarette count in the smoking population we will choose a Poisson distribution, as it is often a good representation of count-data like this.\n\rYou might never have heard of a Poisson distribution and to avoid confusion here: We could just use a uniform distribution between 1 and 36 for example so that smoking 30 cigarettes a day is just as likely as smoking 1 cigarette, given that a person is a smoker.\rHowever, I do not think that this is the case and that the likelihood of a smoker smoking 30 cigarettes is smaller compared to only smoking 5 cigarettes.\rThe Poisson distribution mainly carries this assumption forward into the simulation.\rAs you continue simulating stuff in the future, you will probably get to know more of these useful distributions that neatly describe certain assumptions that we have about the data.\r\rTo create a population like this we can do the following:\nn \u0026lt;- 1000# sample size\rsmoke_yes_no \u0026lt;- ifelse(runif(n, 0, 100) \u0026lt; 77, 0, 1) # vector telling us whether each \u0026quot;person\u0026quot; smokes or not\rn_smoke \u0026lt;- c() # vector that will contain number of cigarettes per day smoked by each person\r# create the number of smoked cigarettes\rfor(i in 1:length(smoke_yes_no)){ if(smoke_yes_no[i] == 1){\rn_smoke[i] \u0026lt;- rpois(1,11) # simulate 1 cigarette count from a poisson distribution with mean 11\r} else{ n_smoke[i] \u0026lt;- 0}\r}\rIn the above code we check for each person whether they are a smoker or not and if so, say that the person’s number of cigarettes smoked comes from a Poisson distribution or otherwise it will be 0 by definition.\nTo implement this for each group, we can just replace the means of the groups by this formula:\nset.seed(1234)\rgroup_TI \u0026lt;- rnorm(n, (50-(7*((max(n_smoke)-n_smoke)/max(n_smoke)))), 15)\rgroup_VI \u0026lt;- rnorm(n, (50-(10*((max(n_smoke)-n_smoke)/max(n_smoke)))), 15)\rgroup_TE \u0026lt;- rnorm(n, (50-(5*((max(n_smoke)-n_smoke)/max(n_smoke)))), 15)\rgroup_VE \u0026lt;- rnorm(n, (50-(3*((max(n_smoke)-n_smoke)/max(n_smoke)))), 15)\rparticipant \u0026lt;- c(1:(n*4))\rfocus \u0026lt;- rep(c(\u0026quot;internal\u0026quot;, \u0026quot;external\u0026quot;), each = n*2)\rmedia \u0026lt;- rep(c(\u0026quot;text\u0026quot;, \u0026quot;visual\u0026quot;), each = n, times = 2)\raov_dat \u0026lt;- data.frame(participant = participant, focus = focus, media = media, score = c(group_TI, group_VI, group_TE, group_VE))\raov_dat$media_sum_num \u0026lt;- ifelse(aov_dat$media == \u0026quot;text\u0026quot;, 1, -1)\raov_dat$focus_sum_num \u0026lt;- ifelse(aov_dat$focus == \u0026quot;external\u0026quot;, 1, -1)\raov_dat$n_smoke \u0026lt;- rep(scale(n_smoke))\rlm_int \u0026lt;- lm(score ~ 1 + focus_sum_num * media_sum_num * n_smoke, data = aov_dat)\rsummary(lm_int)\r## ## Call:\r## lm(formula = score ~ 1 + focus_sum_num * media_sum_num * n_smoke, ## data = aov_dat)\r## ## Residuals:\r## Min 1Q Median 3Q Max ## -50.287 -10.129 0.189 9.930 48.593 ## ## Coefficients:\r## Estimate Std. Error t value\r## (Intercept) 44.44569 0.23621 188.160\r## focus_sum_num 2.12720 0.23621 9.005\r## media_sum_num 0.21372 0.23621 0.905\r## n_smoke 1.77929 0.23633 7.529\r## focus_sum_num:media_sum_num -0.81755 0.23621 -3.461\r## focus_sum_num:n_smoke -0.27972 0.23633 -1.184\r## media_sum_num:n_smoke -0.10452 0.23633 -0.442\r## focus_sum_num:media_sum_num:n_smoke 0.06719 0.23633 0.284\r## Pr(\u0026gt;|t|) ## (Intercept) \u0026lt; 2e-16 ***\r## focus_sum_num \u0026lt; 2e-16 ***\r## media_sum_num 0.365634 ## n_smoke 0.0000000000000629 ***\r## focus_sum_num:media_sum_num 0.000544 ***\r## focus_sum_num:n_smoke 0.236651 ## media_sum_num:n_smoke 0.658334 ## focus_sum_num:media_sum_num:n_smoke 0.776180 ## ---\r## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1\r## ## Residual standard error: 14.94 on 3992 degrees of freedom\r## Multiple R-squared: 0.03674, Adjusted R-squared: 0.03505 ## F-statistic: 21.75 on 7 and 3992 DF, p-value: \u0026lt; 2.2e-16\rNote how the effects that we put in before are still there but they are weaker now as we have smokers included in our sample.\rMoreover, smoking causes a more positive attitude towards smoking, just as we wanted, and the interaction between media and focus is not influenced by whether someone smokes or not, as we put the same punishment for the treatment effect in all the groups, leaving the interaction uninfluenced by whether someone smokes or not.\n\rSummary\rSo now we have seen how we can simulate data for analyses that many people use in their everyday life as a (psychological) researcher.\rSo far, all of the power-analyses that we did can also be done in standard software like G*Power (though in part I of this tutorial I explained why I still prefer simulation).\rHowever, as nice as these analyses are, we often deal with more complicated situations where we have to deal with hierarchical or cross-classified data.\rIn these cases, other approaches like linear-mixed effects models, also called hierarchical models, need to be used to analyse our data.\rThis is where simulation really shines as the structure of the data strongly depends on the research design and in a point-and-click software (though existing) it is difficult to offer all the flexibility that we might need.\rThus, in the fourth part, we will see how we can simulate data and run a power-analysis in these cases.\n\r\rFootnotes\r\r\rWe can actually see that this is the case by calculating cohens d for both assuming that we would perform a t-test for each of the 2 factors with the between-subject cohens d formula from part II of this tutorial:\rfocus:\r(mean(aov_dat$score[aov_dat$focus == \"internal\"])-mean(aov_dat$score[aov_dat$focus == \"external\"]))/sqrt((sd(aov_dat$score[aov_dat$focus == \"internal\"])^2+sd(aov_dat$score[aov_dat$focus == \"external\"])^2)/2) = -0.2824849\rmedia:\r(mean(aov_dat$score[aov_dat$media == \"text\"])-mean(aov_dat$score[aov_dat$media == \"visual\"]))/sqrt((sd(aov_dat$score[aov_dat$media == \"text\"])^2+sd(aov_dat$score[aov_dat$media == \"visual\"])^2)/2) = 0.0281052↩︎\n\r\r\r","date":1592265600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1593625429,"objectID":"4d274ea6087e012b19e1b00880652874","permalink":"https://julianquandt.com/post/power-analysis-by-data-simulation-in-r-part-iii/","publishdate":"2020-06-16T00:00:00Z","relpermalink":"/post/power-analysis-by-data-simulation-in-r-part-iii/","section":"post","summary":"This part extends the previous part by generalizing data simulation to ANOVA and general linear model designs.","tags":["power","data-simulation","R"],"title":"Power Analysis by Data Simulation in R - Part III","type":"post"},{"authors":[],"categories":["Power Analysis"],"content":"\r\r\rThe Power Analysis by simulation in R for really any design - Part II\r\rSimulating a between-subjects t-test\rSimulating a within-subject t-test\r\rUsing a one-sample t-test approach\rUsing a correlated-samples paired t-test approach\r\rSummary: Our first simulations with t-tests\r\rFootnotes\r\r\r\r\r\rClick HERE to download the .Rmd file\nThis blog is also available on R-Bloggers\n\rbutton.btn.collapsed:before\r{\rcontent:'+' ;\rdisplay:block;\rwidth:15px;\r}\rbutton.btn:before\r{\rcontent:'-' ;\rdisplay:block;\rwidth:15px;\r}\r\rThe Power Analysis by simulation in R for really any design - Part II\rThis is Part II of my tutorial on how to do power-analysis by simulation.\rIn Part I, we saw how to do a simulation for a simple toy-example with a coin-toss.\rIn this part, we will use a more realistic problem that we might encounter in our daily research life and see how to simulate the power for these designs.\rBy looking at how to do power-simulation for the independent-samples t-test and the paired t-test we will learn how to simulate normal-distributions, how to specify their effect-sizes, in terms of \\(Cohen\u0026#39;s\\ d\\). Moreover, we simulate correlated (i.e. multivariate) normal distributions in cases where we have correlated observations (e.g. paired-sample t-test).\rThis will be an important tool for later parts of this tutorial.\nIn part III of this tutorial we will learn how we can conceptualize basically any design as a linear model and thereby be very flexible in our power analysis.\rIn part IV we will learn how to apply this technique to complicated designs such as linear mixed-effects models and generalized mixed-effects models.\nSimulating a between-subjects t-test\rLet’s get to it.\rThe first thing we will need again in our simulation is one of the implemented simulation functions in R (those that let R run theoretical experiments for us), but this time it is not rbinom as we are not working with coin-flips but rnorm - the simulation function for the normal distribution.\rLet’s have a short look at that function as we will keep working with it throughout the tutorial.\nrnorm(n, mean, sd) takes three arguments, a sample-size n, a mean and a standard-deviation sd.\rBy specifying these values, we can sample random ‘people’ (or observations) that are participating in our simulated experiments.\rImagine, for example, that we have an intervention study in which we have a treatment group and a control group.\rWe can easily simulate both groups with rnorm but what should the means and sds of the groups be?\nThere are two ways we can approach this.\nWe could think about what group means we expect in our given case and what we expect the spread of the groups to be on the measurment scale that we are working with.\rFor example, if we use a 40-point scale for a clinical test we might know that a group with deficiencies on the thing that we measure would probably score around 10 points and that almost everyone from that group would score lower than 20 points.\rThis statement (most people score around 10, almost everyone scores lower than tified as normal distribution with a mean of 10 and a standard-deviation of 5. In this case only 2.5% of the values (i.e. the values outside the 95% CI) will be higher than 20.\rIn a new research project, we might not be able or willing to to make these statements.\rIn this case, by making some extra assumptions, we can fall back to the approach that we also use in power-calculation software in most cases and define a standardized effect size that we can use to simulate data rather than defining the group means and standard-deviations directly.\r\rI personally try to go with the first approach whenever possible, as I think that in many cases we know more about what we expect from our data than we think, even in new projects.\rEven if we do not know a lot about our data, we might still try out different assumptions (i.e. means and sds) for the groups in our simulation to see what power we would get for each of them.\rThis way, we can make informed decisions about our sample size that are more nuanced than the one in which we just assume a standardized effect size and see what sample-size it implies and are forced to think harder about our data - something that might seem difficult and annoying at first, but is extremely useful and eduucational.\rAnother advantage of specifying the groups directly is that we can do this for any arbitrarily complex design where standardized effect sizes are often difficult to calculate.\nThis said, for the cases where we might really not be willing to specify groups directly, and because it allows me to demonstrate some other interesting points, in this part I will discuss how we can use standardized effect-sizes in our simulation.\rIn part III and IV however, we will always specify effects on the raw scale.\nIf we were using GPower now, we would most likely just fill in a difference between groups in \\(Cohen\u0026#39;s\\ d\\) and be done with it.\rWe could of course also follow this approac in a simulation by defining the groups based on the implied \\(Cohen\u0026#39;s\\ d\\).\rFor instance, we can just assume that group 1 as rnorm(n, 1,2).\rNow, following from the formula for Cohen’s d:\n\\[Cohen\u0026#39;s\\ d = \\frac{(M_1 - M_2)}{pooled \\ sd}\\]\nwhere\n\\[pooled\\ sd = \\sqrt\\frac{(sd_1^2+sd_2^2)}{2}\\]\nand adhering to the student t-test assumption of equal variances we can fill in the pooled sd formula above as\n\\[pooled\\ sd = \\sqrt\\frac{(2^2+2^2)}{2} = 2\\]\nto get a \\(Cohen\u0026#39;s\\ d\\) of .50:\n\\[Cohen\u0026#39;s\\ d = \\frac{(1 - 0)}{2} = 0.5\\]\nTo get any other value for \\(Cohen\u0026#39;s\\ d\\) we can just change the pooled sd value to whatever we want.\rMore generally, we want to solve the equation above for the pooled sd after specifying any \\(Cohen\u0026#39;s\\ d\\), e.g.:\n\\[0.5= \\frac{(1 - 0)}{pooled\\ sd}\\]\nWe can solve an equation like that with R’s somewhat unintuitive solve function like this:\nsolve(0.5,1) # cohens d of .5\r## [1] 2\rsolve(0.25,1) # cohens d of .25\r## [1] 4\rsolve(2,1) # cohens d of 2\r## [1] 0.5\rgiving us three examples of how we would need to specify pooled sd to arrive at a particular \\(Cohen\u0026#39;s\\ d\\).\nThus, if we want to do a t-test with two simulated groups and a cohen’s d of 0.5 we can simulate two groups of a particular sample-size by using the rnorm function.\rLet’s say we have 30 participants in each group.\nset.seed(1234)\rgroup1 \u0026lt;- rnorm(30, 1, 2)\rgroup2 \u0026lt;- rnorm(30, 0, 2)\rWe can visualize the groups that we got in a plot like this:\nhist(group1, col = \u0026quot;#addd8e\u0026quot;, breaks = 10, main = \u0026quot;Histogram of both groups\u0026quot;, xlab = \u0026quot;\u0026quot;)\rhist(group2, add = TRUE, breaks = 10, col= \u0026quot;#31a354\u0026quot;)\rWe can already make important observations from this plot:\nWe wanted to get normal distributions, but what we got here does not really look normal.\rWhy is that? Because we only have 30 people per group and taking only 30 values from the specified normal distributions does not really give us a good approximation of the real distribution.\rThis point is important: The sampling variability in such small groups is high and often, if small sample-studies (i.e. underpowered studies) find “effects”, they are often rather big and the consequence of this sampling variability rather than real differences of groups.\rFor example, by looking at the means of our sampled groups mean(group1) = 0.40715 and mean(group2) = -1.1032366 we see that the group mean of group 1 is actually closer to the mean that we specified for group 2 (i.e. 0) than to its own mean, while the mean for group 2 is far away from our intended mean.\rLooking at the sds actually shows that they are quite close to what we wanted sd(group1) = 1.8059661 and sd(group2) = 1.9179992.\rThe \\(Cohen\u0026#39;s\\ d\\) that we wanted is also not presented very accurately at (mean(group1)-mean(group2))/(sqrt((sd(group1)^2+sd(group2)^2)/2)) = 0.8108043.\rAgain, if we would do this in Gpower, and specify a \\(Cohen\u0026#39;s\\ d\\), we will always work with an exact \\(Cohen\u0026#39;s\\ d\\), in a simulation approach we do not.\nSo let us run a t-test to see whether there is a significant difference here.\rFirst, we need to decide on an alpha-level again.\rWhat will we choose?\rWell, to have a good justification we have to elaborate on what the groups actually represent.\rLet us say that the difference between groups is related to an intervention that can elevate depressive symptoms.\rThus, the control group (group1) did not get the intervention and scores higher on depressive symptoms while the treatment group (group2) is expected to score lower.\rLet us assume that this is the first study that we run and that, if we find anything we will follow it up by more extensive studies anyway. Therefore, we might not want to miss a possible effect by setting a too conservative alpha-level.\rIf we find something in this study, we will conduct further studies in which we are more strict about the alpha level.\rThus, we choose .10 for this first “pilot” study.\n\rNOTE: The alpha-level “jusficications” in this tutorial are for educational purposes and to provide a starting point. They are obviously not as rigorous as we would like in a real research project. If you find yourself in a situation where you want to justify your alpha-level see Justify your alpha by Lakens et al. for a good discussion on this.\r\rWe can now run a t-test with R’s integrated t.test function.\nt.test(group1, group2, paired = FALSE, var.equal = TRUE, conf.level = 0.9)\r## ## Two Sample t-test\r## ## data: group1 and group2\r## t = 3.1402, df = 58, p-value = 0.002656\r## alternative hypothesis: true difference in means is not equal to 0\r## 90 percent confidence interval:\r## 0.7064042 2.3143690\r## sample estimates:\r## mean of x mean of y ## 0.407150 -1.103237\rThe t-test shows, that this effect would be significant.\rHowever, we also got “lucky” and had a larger effect than we intended to have.\rTo do a proper power analysis (lets say we first want to see whether 30 people per group are enough) we need to not only simulate each group once, but many many times and see how often we get a significant result at the desired alpha-level1.\rMoreover, we would like to have a power of at least 95%, again reflecting our view that we do not want to miss a possible effect.\nIn normal language these assumptions mean that if there is a difference, we will detect it in 19 out of 20 cases while, if there is no difference, we will only be incorrectly claiming that there is one in 1 out of 10 cases.\nWe will do this similarly to our simulations in part 1 of this tutorial.\nset.seed(1)\rn_sims \u0026lt;- 1000 # we want 1000 simulations\rp_vals \u0026lt;- c()\rfor(i in 1:n_sims){\rgroup1 \u0026lt;- rnorm(30,1,2) # simulate group 1\rgroup2 \u0026lt;- rnorm(30,0,2) # simulate group 2\rp_vals[i] \u0026lt;- t.test(group1, group2, paired = FALSE, var.equal = TRUE, conf.level = 0.90)$p.value # run t-test and extract the p-value\r}\rmean(p_vals \u0026lt; .10) # check power (i.e. proportion of p-values that are smaller than alpha-level of .10)\r## [1] 0.592\rAha, so it appears that our power mean(p_vals \u0026lt; .10) = 0.592 is much lower than the 95% that we desired.\rThus, we did really get lucky in our example above when we found an effect of our intervention.\nTo actually do a legit power-analysis however, we would like to know how many people we do need for a power of 95 percent.\rAgain we can modify the code above to take this into account.\nset.seed(1)\rn_sims \u0026lt;- 1000 # we want 1000 simulations\rp_vals \u0026lt;- c()\rpower_at_n \u0026lt;- c(0) # this vector will contain the power for each sample-size (it needs the initial 0 for the while-loop to work)\rcohens_ds \u0026lt;- c()\rcohens_ds_at_n \u0026lt;- c() n \u0026lt;- 30 # sample-size i \u0026lt;- 2\rwhile(power_at_n[i-1] \u0026lt; .95){\rfor(sim in 1:n_sims){\rgroup1 \u0026lt;- rnorm(n,1,2) # simulate group 1\rgroup2 \u0026lt;- rnorm(n,0,2) # simulate group 2\rp_vals[sim] \u0026lt;- t.test(group1, group2, paired = FALSE, var.equal = TRUE, conf.level = 0.9)$p.value # run t-test and extract the p-value\rcohens_ds[sim] \u0026lt;- abs((mean(group1)-mean(group2))/(sqrt((sd(group1)^2+sd(group2)^2)/2))) # we also save the cohens ds that we observed in each simulation\r}\rpower_at_n[i] \u0026lt;- mean(p_vals \u0026lt; .10) # check power (i.e. proportion of p-values that are smaller than alpha-level of .10)\rcohens_ds_at_n[i] \u0026lt;- mean(cohens_ds) # calculate means of cohens ds for each sample-size\rn \u0026lt;- n+1 # increase sample-size by 1\ri \u0026lt;- i+1 # increase index of the while-loop by 1 to save power and cohens d to vector\r}\rpower_at_n \u0026lt;- power_at_n[-1] # delete first 0 from the vector\rcohens_ds_at_n \u0026lt;- cohens_ds_at_n[-1] # delete first NA from the vector\rThe loop stopped at a sample-size of n-1 = 84 participants per group.\rThus make a conclusion about the effectiveness of our intervention at the specified alpha-level with the desired power we need 168 people in total.\nTo visualize the power we can plot it again, just as in the first part of the tutorial.\nplot(30:(n-1), power_at_n, xlab = \u0026quot;Number of participants per group\u0026quot;, ylab = \u0026quot;Power\u0026quot;, ylim = c(0,1), axes = TRUE)\rabline(h = .95, col = \u0026quot;red\u0026quot;)\rAgain, this plot shows us how our power to detect the effect slowly increases if we increase the sample-size until it reaches our desired power.\nThere is another interesting observation to make here.\rIn the code above, I also calculate the average \\(Cohen\u0026#39;s\\ d\\) for each sample size and the plot below shows how it changes with increasing sample-size.\nplot(30:(n-1), cohens_ds_at_n, xlab = \u0026quot;Number of participants per group\u0026quot;, ylab = \u0026quot;Cohens D\u0026quot;, ylim = c(0.45,0.55), axes = TRUE)\rabline(h = .50, col = \u0026quot;red\u0026quot;)\rIt is not super obvious in this plot and I had to change the scale of the y-axis quite a bit to make it visible, but we can actually see how our average \\(Cohen\u0026#39;s\\ d\\) initially deviates slightly more from the desired \\(Cohen\u0026#39;s\\ d\\) of .50 than in de end.\rIn other words, in the beginning, for small sample-sizes there is more fluctuation than for bigger sample-sizes.\rThat is pretty neat, as it seems very desirable that a power-estimation procedure takes into account that for smaller sample-sizes, even if the effect in the population is exactly the same (i.e. we always sample groups with a difference of \\(Cohen\u0026#39;s\\ d\\) = .50) it is just less precise.\nLet’s have a brief summary of what we did so far.\rWe just used the formula for \\(Cohen\u0026#39;s\\ d\\) to give our groups a certain difference that we are interested in, ran 1000 simulated experiments for each sample-size and calculated the power, just as in the first part of the tutorial.\nHowever, I want to mention again that, even though it is convenient to specify the effect-size this way as it saves us from having to specify precise group means and standard-deviations directy and makes the specification more comparable, it is often preferable to specify the parameters on the original scale that we are interested in.\rThis is especially the case if we have previous data on a research topic that we can make use of.\rMoreover, for more complex designs with many parameters, standardized effect sizes are often difficult to obtain and we are forced to make our assumptions on the original scale of the data.\rWe will see this in later examples.\n\rSimulating a within-subject t-test\rIntuitively, it might seem that we can use the exact same approach above for a paired t-test as well.\rHowever, the problem with this is that in a paired t-test we get 2 data-points from the same individual.\rFor example, image we have a group of people that get an intervention and we measure their score before and after the intervention and want to compare them with a paired t-test.\rIn this case, the score of the post-measure of a given individual is not completely independent of the score of the pre-measure.\rIn other words, somebody who scores very low on the pre-measure will most likely not score very high on the post-measure and vice versa.\nThus, there is a correlation between the pre- and the post-measures in that the pre-measures already tell us a little bit about what we can expect on the post-measure.\rYou probably already knew this but why does this matter for power simulation, you might wonder.\rIt matters as it directly influences our power to detect an effect as we will see later.\rFor now let’s just keep in mind that it is important.\nSo what do we do in a situation with correlated data as in the pre-post intervention situation?\rThere are two ways we can go from here.\rFirst, we can simulate correlated normal distributions, as already mentioned above.\rHowever, for the particular case of a paired sample t-test, we can also just make use of the fact that, in the end, we are testing whether the difference between post- and pre-measures is different from 0.\rIn this case, the correlation between the pre and the post-measure is implicitely handled when substracting the two measures. This way, we do not need to directly specify it.\rIf the correlation is close to one, the standard-deviation of the difference scores will be very small, if it is zero, we will end up with the same situation that we have in the independent-sample t-test.\rThus, we can just make use of a one-sample in which we test whether the distribution of difference-scores differs from zero as the paired t-test is equivalent to the one-sample t-test on difference scores (see Lakens, 2013 for more details on this).\nThough the one-sample approach is easier to simulate, I will describe both approaches in the following as the first approach (simulating correlated normal-distributions) is more flexible and we need it for the situations we deal with later.\nUsing a one-sample t-test approach\rWhen we want to do our power-calculation based on the one-sample t-test approach, we only have to specify a single difference-score distribution.\rWe can do this again, based on the \\(Cohen\u0026#39;s\\ d\\) formula, this time for a one-sample scenario:\n\\[ Cohen\u0026#39;s\\ d = \\frac{M_{diff} - \\mu_0}{SD_{diff}}\\]\nIn the above formula, to get our values for the simulation we can substitute the \\(\\mu_0\\) by 0 (as our null-hypothesis is no difference) and solve the equation in the same way as above by fixing the mean-difference between pre- and post-measure, \\(M_{diff}\\) to 1 and calculating the sd we need for each given \\(Cohen\u0026#39;s\\ d\\), for instance\n\\[ 0.5 = \\frac{1}{SD_{diff}}\\]\nputting this into Rs solve function again, we unsurprisingly get a 2 in this case.\nsolve(0.5, 1)\r## [1] 2\rTo run our simulation we just need to modify the code above to run a one-sample t-test rather than a two-sample t-test and change the formula for \\(Cohen\u0026#39;s\\ d\\)\nset.seed(1)\rn_sims \u0026lt;- 1000 # we want 1000 simulations\rp_vals \u0026lt;- c()\rpower_at_n \u0026lt;- c(0) # this vector will contain the power for each sample-size (it needs the initial 0 for the while-loop to work)\rcohens_ds \u0026lt;- c()\rcohens_ds_at_n \u0026lt;- c() n \u0026lt;- 2 # sample-size i \u0026lt;- 2\rwhile(power_at_n[i-1] \u0026lt; .95){\rfor(sim in 1:n_sims){\rdifference \u0026lt;- rnorm(n,1,2) # simulate the difference score distribution\rp_vals[sim] \u0026lt;- t.test(difference, mu = 0, conf.level = 0.90)$p.value # run t-test and extract the p-value\rcohens_ds[sim] \u0026lt;- mean(difference)/sd(difference) # we also save the cohens ds that we observed in each simulation }\rpower_at_n[i] \u0026lt;- mean(p_vals \u0026lt; .10) # check power (i.e. proportion of p-values that are smaller than alpha-level of .10)\rcohens_ds_at_n[i] \u0026lt;- mean(cohens_ds) # calculate means of cohens ds for each sample-size\rn \u0026lt;- n+1 # increase sample-size by 1\ri \u0026lt;- i+1 # increase index of the while-loop by 1 to save power and cohens d to vector\r}\rpower_at_n \u0026lt;- power_at_n[-1] # delete first 0 from the vector\rcohens_ds_at_n \u0026lt;- cohens_ds_at_n[-1] # delete first NA from the vector\rWe see that the loop stopped at n = 43 so the sample size we need is n-1 = 42\nWe can plot the power-curve again\nplot(2:(n-1), power_at_n, xlab = \u0026quot;Number of participants per group\u0026quot;, ylab = \u0026quot;Power\u0026quot;, ylim = c(0,1), axes = TRUE)\rabline(h = .95, col = \u0026quot;red\u0026quot;)\rand the \\(Cohen\u0026#39;s\\ d\\) values:\nplot(2:(n-1), cohens_ds_at_n, xlab = \u0026quot;Number of participants per group\u0026quot;, ylab = \u0026quot;Cohens D\u0026quot;, ylim = c(0.0,1.0), axes = TRUE)\rabline(h = .50, col = \u0026quot;red\u0026quot;)\rWe see again, and this time more dramatically, how our simulated effect size becomes more accurate the bigger our sample gets.\n\rUsing a correlated-samples paired t-test approach\rThe relationship between \\(SD_{diff}\\) and the correlation\rIn the above example, we respecified a paired t-test as a one-sample t-test on the difference scores.\rHowever, what we are actually working with is two correlated distributions of measurements.\rTo demonstrate this point, let us have a look at how we would actually calculate the standard deviation of the difference scores (\\(SD_{diff}\\)) in the above equation for \\(Cohen\u0026#39;s\\ d\\).\rThe formula to calculate \\(SD_{diff}\\) from the standard deviation of the two measurements (pre and post) and their correlation is:\n\\[SD_{diff} = \\sqrt{SD_{pre}^2+SD_{post}^2-2r \\times SD_{pre} \\times SD_{post}} \\]\nIt is not important at this point to understand why this is the case (we will just trust Cohen on this) but see how we can, for any given \\(SD_{diff}\\) and assuming both groups have, for example, a standard deviation of 2, solve the formula to see what correlation (the \\(r\\) in the above formula) it would imply.\nImagine, for instance, we assume (like in the independent-samples t-test above) that both measures have a standard-deviation of 2 and that the standard-deviation of the difference scores would also be 2 so that we would have the same situation as in the one-sample t-test example above, where we had a mean-difference of 1 and a difference-score standard-deviation of 2.\nFilling this in we get\n\\[2 = \\sqrt{2^2+2^2-2r \\times 2 \\times 2} \\]\nSolving this equation for \\(r\\), we get2 \\(r = 0.5\\):\nTherefore, interestingly the situation in which we use the same groups as above and assume that we would get the same \\(SD_{diff}\\) of 2 as we assumed in our one-sample situation would imply that the correlation between the pre- and the post-measure is \\(r = 0.5\\).\rWhat does this mean?\rWell, lets see what happens if we assume a correlation of \\(r = .90\\) and see what \\(SD_{diff}\\) we get:\n\\[SD_{diff} = \\sqrt{2^2+2^2-2 \\times 0.90 \\times 2 \\times 2} \\]\nSolving this in R gives us: sqrt(2^2+2^2-2*0.9*2*2) = 0.89.\rThus, if the correlation increases the standard-deviation of the difference-scores becomes smaller.\rIf we do the same with a correlation of .10 we get sqrt(2^2+2^2-2*0.1*2*2) = 2.68.\rThus, when the correlation decreases the standard-deviation becomes bigger.\rInterestingly, this demonstrates that for the same mean-difference, a high correlation results in a larger \\(Cohen\u0026#39;s\\ d\\) as calculated for the difference scores in the one-sample case.\rIn other words, as the pre-scores tend to be more similar to the post-scores (i.e. they have a high correlation), the standard-deviation of the difference scores decreases.\rThis, in turn, results in higher power to detect an effect.\nTo sum up all of the above, we can either specify a difference-score distribution directly and thereby imply a certain correlation by specifying the \\(SD_{diff}\\), or we can see what \\(SD_{diff}\\) we get with a certain correlation by using the formula above and use the result for the one-sample simulation.\rHowever, instead of working with the one-sample t-test, in the next section, we will see how we can directly simulate correlated normal-distributions in R.\n\rSimulating correlated normal-distributions and demystifying the multivariate normal.\rIn real life, almost everything is correlated to some degree.\rThough these correlations are often not of interest, they sometimes are and in a good simulation we want to acknowledge them. For instance, predictors in a regression might be correlated or random effects in a mixed-model.\nThe following part is (again) longer than I intended but I feel that it is important to understand how we simulate correlated normal-distributions and what a multivariate normal-distribution is.\rIn most cases later on we will deal with some kind of correlated normal distributions (in mixed-models we will always encounter them for example) so I think it helps if we have a look at them now in an easier example, so we have one problem less to worry about later on.\nRephrasing the problem of simulating two correlated normal-distributions, we can say that we want to simulate a multivariate normal distribution or, more specifically in this case, a bivariate normal distribution.\rIf you never heard these terms before, they might seem very opague, so let’s see what they are.\rI will first show how we can simulate them, and explain what exactly this multivariate normal distribution means afterwards with a little visual intuiton.\rWe can simulate a multivariate normal distribution by using the mvrnorm() function from the MASS package but it works slightly different than the simulation functions that we have used so far (rnorm and rbinom).\rLets have a look at how this works (code explained below).\nrequire(MASS) # load MASS package\r## Loading required package: MASS\rpre_post_means \u0026lt;- c(pre = 0,post = 1) # define means of pre and post in a vector\rpre_sd \u0026lt;- 2 # define sd of pre-measure\rpost_sd \u0026lt;- 2 # define sd of post-measure\rcorrelation \u0026lt;- 0.5 # define their correlation\rsigma \u0026lt;- matrix(c(pre_sd^2, pre_sd*post_sd*correlation, pre_sd*post_sd*correlation, post_sd^2), ncol = 2) # define variance-covariance matrix\rset.seed(1)\rbivnorm \u0026lt;- data.frame(mvrnorm(10000, pre_post_means, sigma)) # simulate bivariate normal\rThe above code samples 10,000 observations from a bivariate normal-distribution, or in terms of our example, it samples 10,000 pre-measures with 10,000 correlated post-measures.\rThe first thing that is different from our earlier simulations is the first line of the code pre_post_means \u0026lt;- c(0,1).\rInstead of defining our means seperately for each measurement, as we have done earlier in the independent-sample case, we now put the pre- and post-measurement mean that we assume into a vector.\rThis is because we will simulate both measurements together in the mvrnorm function, and therefore both means need to be provided at the same time.\nSecondly, we define the standard-deviations of both measurements just as we did earlier and also specify a correlation that we would like our data-points to have, in this case 0.5.\nNow, the line matrix(c(pre_sd^2, pre_sd*post_sd*correlation, pre_sd*post_sd*correlation, post_sd^2), ncol = 2) does something that we have not done before and it might look quite confusing.\rWhat we are doing here is specifying the variance-covariance matrix.\rThis is nothing more than a table containing the variances of our pre- and post-measurement (the first and the last entry in the list) and the covariance between the two variables twice - once for each measurement (the middle 2 entries in the list).\rConceptually you can see this variance-covariance matrix as the standard-deviation of the multivariate normal that mvrnorm needs instead of the standard-deviation that we put into rnorm earlier.\nWe can visualize the variance-covariance matrix sigma to demystify it a bit.\ncolnames(sigma) \u0026lt;- c(\u0026quot;pre\u0026quot;, \u0026quot;post\u0026quot;)\rrownames(sigma) \u0026lt;- c(\u0026quot;pre\u0026quot;, \u0026quot;post\u0026quot;)\rsigma\r## pre post\r## pre 4 2\r## post 2 4\rThus, this matrix is nothing more than a table containing the variance of each variable (4 in each case) and their covariance (i.e. the correlation of the two multiplied by both standard-deviations (\\(Cov(pre,post) = \\rho(pre,post)*sd_{pre}*sd_{post}\\)).\nIn the next line of the code we put this all into mvrnorm to simulate our bivariate normal distribution and store the results in a data-frame with 2 columns, each containing one measurement point:\nhead(bivnorm)\r## pre post\r## 1 -0.2807182 -0.8893814\r## 2 1.3746052 0.2615539\r## 3 -0.4119554 -1.4827470\r## 4 3.9486678 2.5775470\r## 5 1.0711637 1.0702847\r## 6 -0.8961042 -0.9460816\rWhen we run cor(bivnorm$pre, bivnorm$post) we see that indeed their correlation is 0.52 and close to what we specified.\nTo see how we can imagine such a bivariate normal distribution, we can visualize it the following way.\nIf we draw a histogram of each measurement individually, it looks like this.\npar(mfrow=c(1,2))\rhist(bivnorm$pre, main = \u0026quot;pre-measure\u0026quot;)\rhist(bivnorm$post, main = \u0026quot;post-measure\u0026quot;)\rHowever, imagine we would not only look at each histogram seperately but we would combine them into one plot by putting the pre-measure scores of each simulated individual on the x-axis and putting the post-measures on the y-axis like this:\nplot(bivnorm$pre, bivnorm$post, xlab = \u0026quot;pre-measure\u0026quot;, ylab = \u0026quot;post-measure\u0026quot;)\rIn the above plot, we can clearly see the correlations between the two measurements that we put in the data.\rMore elegantly, we can combine the two histograms in the following way.\nbivnorm_kde \u0026lt;- kde2d(bivnorm[,1], bivnorm[,2], n = 50) # calculate kernel density (i.e. the \u0026quot;height of the cone on the z-axis\u0026quot;; not so important to understand here)\rpar(mar = c(0, 0, 0, 0)) # tel r not to leave so much space around the plot\rpersp(bivnorm_kde, phi = 45, theta = 30, xlab = \u0026quot;pre-measure\u0026quot;, ylab = \u0026quot;post-measure\u0026quot;, zlab = \u0026quot;frequency\u0026quot;) # plot the bivariate normal\rHere, we see clearly how our bivariate normal distribution is nothing more than the 2 normal-distributions of each measurement-point combined into one “cone-shaped” normal distribution that has a certain correlation.\nThe plot below shows how this cone looks with different correlations.\nNotice how for higher correlations, the cone becomes more and more narrow and starts looking like a “shark-fin” with a correlation of .90.\rThis “narrowring” of the cone is the visualization of why the standard-deviations of the difference scores get more narrow.\nIf we visualize this as a point cloud again the three correlations look like this:\nbivnorm_10 \u0026lt;- as.data.frame(bivnorm_10)\rbivnorm_90 \u0026lt;- as.data.frame(bivnorm_90)\rpar(mfrow = c(1,3))\rplot(bivnorm_10$pre, bivnorm_10$post)\rplot(bivnorm$pre, bivnorm$post)\rplot(bivnorm_90$pre, bivnorm_90$post)\rThis again, clearly shows the manipulatino between the pre- and post measures.\n\rPower-analysis with the multivariate normal\rNow that we know what we are doing when using mvrnorm we can go ahead and do a power-simulation for the example above with a bivariate normal-distribution.\rHowever, as we are not sure how big our correlation is, we can try 3 different correlations in the code above by placing the simulation in another for-loop and telling it to try different correlations.\nmu_pre_post \u0026lt;- c(pre = 0, post = 1)\rsd_pre \u0026lt;- 2\rsd_post \u0026lt;- 2\rcorrelations \u0026lt;- c(0.1, 0.5, 0.9)\rset.seed(1)\rn_sims \u0026lt;- 1000 # we want 1000 simulations\rp_vals \u0026lt;- c()\r# this vector will contain the power for each sample-size (it needs the initial 0 for the while-loop to work)\rcohens_ds \u0026lt;- c()\rpowers_at_cor \u0026lt;- list()\rcohens_ds_at_cor \u0026lt;- list()\rfor(icor in 1:length(correlations)){ # do a power-simulation for each specified simulation\rn \u0026lt;- 2 # sample-size i \u0026lt;- 2 # index of the while loop for saving things into the right place in the lists\rpower_at_n \u0026lt;- c(0) cohens_ds_at_n \u0026lt;- c() sigma \u0026lt;- matrix(c(sd_pre^2, sd_pre*sd_post*correlations[icor], sd_pre*sd_post*correlations[icor], sd_post^2), ncol = 2) #var-covar matrix\rwhile(power_at_n[i-1] \u0026lt; .95){\rfor(sim in 1:n_sims){\rbivnorm \u0026lt;- data.frame(mvrnorm(n, mu_pre_post, sigma)) # simulate the bivariate normal\rp_vals[sim] \u0026lt;- t.test(bivnorm$pre, bivnorm$post, paired = TRUE, var.equal = TRUE, conf.level = 0.9)$p.value # run t-test and extract the p-value\rcohens_ds[sim] \u0026lt;- abs((mean(bivnorm$pre)-mean(bivnorm$post))/(sqrt(sd(bivnorm$pre)^2+sd(bivnorm$post)^2-2*cor(bivnorm$pre, bivnorm$post)*sd(bivnorm$pre)*sd(bivnorm$post)))) # we also save the cohens ds that we observed in each simulation\r}\rpower_at_n[i] \u0026lt;- mean(p_vals \u0026lt; .10) # check power (i.e. proportion of p-values that are smaller than alpha-level of .10)\rnames(power_at_n)[i] \u0026lt;- n\rcohens_ds_at_n[i] \u0026lt;- mean(cohens_ds) # calculate means of cohens ds for each sample-size\rnames(cohens_ds_at_n)[i] \u0026lt;- n\rn \u0026lt;- n+1 # increase sample-size by 1\ri \u0026lt;- i+1 # increase index of the while-loop by 1 to save power and cohens d to vector\r}\rpower_at_n \u0026lt;- power_at_n[-1] # delete first 0 from the vector\rcohens_ds_at_n \u0026lt;- cohens_ds_at_n[-1] # delete first NA from the vector\rpowers_at_cor[[icor]] \u0026lt;- power_at_n # store the entire power curve for this correlation in a list\rcohens_ds_at_cor[[icor]] \u0026lt;- cohens_ds_at_n # do the same for cohens d\rnames(powers_at_cor)[[icor]] \u0026lt;- correlations[icor] # name the power-curve in the list according to the tested correlation\rnames(cohens_ds_at_cor)[[icor]] \u0026lt;- correlations[icor] # same for cohens d\r}\rAgain, the above code runs a power-simulation, or more specifically three power-analyses, one for each correlation that we wanted to test.\rNotice how this time we specify paired = TRUE in the t.test function, to indicate that we are dealing with non-independent observations.\rAlso note that a new part of the code saves the power_at_n vector to a list called power_at_cor.\rThis list, will have 3 elements, each of them the power curve for one of the correlations.\rWe can access each power-curve bei either powers_at_cor[[1]] to get the first vector in the list (the double square brackets mean first entire vector rather than first number only) or we can use it by indicating its name as powers_at_cor$0.1` to tell R that we want the power curve for a correlation of .10.\nWe can plot these power-curves next to each other\npar(mfrow=c(1,3))\rplot(2:(length(powers_at_cor$`0.1`)+1), powers_at_cor$`0.1`, xlab = \u0026quot;Number of participants\u0026quot;, ylab = \u0026quot;Power\u0026quot;, ylim = c(0,1), axes = TRUE, main = \u0026quot;correlation = 0.1\u0026quot;)\rabline(h = .95, col = \u0026quot;red\u0026quot;)\rplot(2:(length(powers_at_cor$`0.5`)+1), powers_at_cor$`0.5`, xlab = \u0026quot;Number of participants\u0026quot;, ylab = \u0026quot;Power\u0026quot;, ylim = c(0,1), axes = TRUE, main = \u0026quot;correlation = 0.5\u0026quot;)\rabline(h = .95, col = \u0026quot;red\u0026quot;)\rplot(2:(length(powers_at_cor$`0.9`)+1), powers_at_cor$`0.9`, xlab = \u0026quot;Number of participants\u0026quot;, ylab = \u0026quot;Power\u0026quot;, ylim = c(0,1), axes = TRUE, main = \u0026quot;correlation = 0.9\u0026quot;)\rabline(h = .95, col = \u0026quot;red\u0026quot;)\rHere we see how drastically the correlation influences the power in this situation.\rWith a high correlation, we need only very few participants to achieve the desired power in the specified case.\rWhy is this?\rThe reason for this is what we had a look at above: The decreasing standard-deviation of the difference scores the higher the correlation gets.\nThis is how the effect-sizes look.\npar(mfrow=c(1,3))\rplot(2:(length(cohens_ds_at_cor$`0.1`)+1), cohens_ds_at_cor$`0.1`, xlab = \u0026quot;Number of participants\u0026quot;, ylab = \u0026quot;Cohens D\u0026quot;, ylim = c(0,1), axes = TRUE, main = \u0026quot;correlation = 0.1\u0026quot;)\rabline(h = .50, col = \u0026quot;red\u0026quot;)\rplot(2:(length(cohens_ds_at_cor$`0.5`)+1), cohens_ds_at_cor$`0.5`, xlab = \u0026quot;Number of participants\u0026quot;, ylab = \u0026quot;Cohens D\u0026quot;, ylim = c(0,1), axes = TRUE, main = \u0026quot;correlation = 0.5\u0026quot;)\rabline(h = .50, col = \u0026quot;red\u0026quot;)\rplot(2:(length(cohens_ds_at_cor$`0.9`)+1), cohens_ds_at_cor$`0.9`, xlab = \u0026quot;Number of participants\u0026quot;, ylab = \u0026quot;Cohens D\u0026quot;, ylim = c(0,10), axes = TRUE, main = \u0026quot;correlation = 0.9\u0026quot;)\rabline(h = .50, col = \u0026quot;red\u0026quot;)\rFor .10 the value of the effect-size seems slightly underestimated, for .50 it approaches .50 just as in the two-sample case and for .90 it seems overestimated by quite a bit.\rDid something go wrong?\rWell no. As we’ve seen above \\(Cohen\u0026#39;s\\ d\\) is calculated by dividing the mean-difference by the standard-deviation of the difference scores which becomes smaller and smaller with increasing correlation.\rTherefore, calculated this way, \\(Cohen\u0026#39;s\\ d\\) is much bigger in the case with the larger correlation.\rThis is also why we seem to have much bigger power - we just work with a larger effect size than we intended.\rWe can even calculate by how much the effect-size is influenced by the correlation by dividing the effect-size that we would calculate based on the means and sds of our groups by \\(\\sqrt{2(1-r)}\\).\nr = .90 –\u0026gt; 0.5/sqrt(2*(1-.90)) = 1.118034\rr = .50 –\u0026gt; 0.5/sqrt(2*(1-.50)) = 0.5\rr = .10 –\u0026gt; 0.5/sqrt(2*(1-.10)) = 0.372678\nYou might wonder how we can specify effect-sizes in these cases of correlated data. Do we “correct” the expected effect for the correlation or do we just assume that it is .50 and use the one-sample scenario above?\rI do not have a good answer for this.\rIn many cases it might be fine to only specify the effect-size of the pre-post design based on the difference scores as we did in the one-sample case.\rIn some cases, however, we might find the correlation very important or have more information about the correlation of 2 measures than about the change in measures due to an intervention.\rIn those cases, it might make sense to be very specific about the expected correlations and be aware that we might need more data if the correlation is low.\rEventually, our data stem from an underlying data generating process that includes the correlation between variables and measures and it is always good to be aware of the factors that might possibly influence the results.\rWhen we collect data in a pre-post design, we do in fact measure a score at 2 time-points and do not directly assess the difference.\rWhen we specify the standard-deviation of the difference scores however, to arrive at a given \\(Cohen\u0026#39;s\\ d\\), we implicitely make assumptions about the correlations of these two measures.\nThe Take-home message here is that correlations matter and that we need to be aware of this. The good news is that power-simulations will at least make us aware of these factors and show us how different assumptions lead to different results.\n\r\r\rSummary: Our first simulations with t-tests\rThis was the last bit that I wanted to discuss about simulating t-tests and the end of part II of this tutorial.\rWe have now learned how to simulate a t-test by using either \\(Cohen\u0026#39;s\\ d\\) as an effect-size estimate and, if necessary, tell R that our two groups, or measurements, are correlated in some way.\rWhat we learned above is not restricted to doing t-tests however.\rSimulating univariate (i.e. uncorrelated) or multivariate (i.e. correlated) normal-distributions will be what we do most of the time in part III and part IV of the tutorial.\rThe only thing that will change for more complicated designs is how we combine the different tools that we learned in this part to achieve our goal.\nIn part III of this tutorial, we will see how we can basically run every analysis as a linear model using the lm function instead of using the t.test function for t-tests, the aov function for ANOVA-designs and so forth.\rBy exploring how this works for t-test, anova and regression we will simulate our way through the third part and be flexible enough to simulate any classical research designs that we would, for example, be able to do in GPower. In part IV we will go beyond this and simulate mixed-effect models.\n\r\rFootnotes\r\r\rThink back to the possible sequences of coin tosses in part I.\rInstead of possible sequences of coin-tosses, we deal with possible sequences of people-scores here, assuming that they come from the underlying distribution that we specify.\rTo get a good approximation of all the possible samples that we could get that still follow the specified distribution, we need to simulate many, many times.↩︎\n\rThis is how we solve for r:\r\r\r2\r=\r\r\r2\r2\r\r+\r\r2\r2\r\r−\r2\rr\r×\r2\r×\r2\r\r\r\r\r\r\r\r⟺\r\r\r\r\r2\r=\r\r8\r−\r8\rr\r\r\r\r\r\r|\r2\r\r\r\r\r\r\r\r⟺\r\r\r\r\r4\r=\r8\r−\r8\rr\r\r\r\r\r|\r\r−\r8\r;\r÷\r(\r−\r8\r)\r\r\r\r\r\r\r⟺\r\r\r\r\r0.5\r=\rr\r\r\r\r↩︎\n\r\r\r","date":1589241600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1593625482,"objectID":"2d947e302dd1a377cf4458eee616db7f","permalink":"https://julianquandt.com/post/power-analysis-by-data-simulation-in-r-part-ii/","publishdate":"2020-05-12T00:00:00Z","relpermalink":"/post/power-analysis-by-data-simulation-in-r-part-ii/","section":"post","summary":"This part foucuses on simple scenarios (t-tests) to introduce the simulation of correlated measurements and multivariate normal-distributions","tags":["power","data-simulation","R"],"title":"Power Analysis by Data Simulation in R - Part II","type":"post"},{"authors":[],"categories":["Power Analysis"],"content":"\r\r\rPower Analysis by Data Simulation in R - Part I: Theoretical introduction to simulation\rBack to Power\rFinally, an actual power simulation.\rSummary\rFootnotes\r\r\r\r\r\rClick HERE to download the .Rmd file\nThis blog is also available on R-Bloggers\r\rPower Analysis by Data Simulation in R - Part I: Theoretical introduction to simulation\rWhy this blog?\rIn recent years, power-analysis has become a standard tool in the behavioral sciences.\rWith an ongoing replication crisis, high-power research is the a key to improving replicability and to improving the reliability of findings.\rEspecially with preregistration slowly becoming standard practice in psychology, power-analysis, the practice of estimating the required sample-size a-priori, is a more important step than ever to plan research projects accordingly.\nNot so long ago, power-analysis was a rather complicated endeavor urging people to use algebraic solutions to calculate power of planned studies which can be demanding especially for non-trivial designs (i.e. basically anything that is not a correlation).\rLuckily, for many research designs power-analysis is nowadays readily available in software packages such as G*Power and even for relatively complex designs in specialized tools such as the great PANGEA tool for all kinds of generalized ANOVA designs and other tools by Jake Westfall.\nHowever, while these tools are really great they also have (in my personal opinion) two drawbacks.\rFirst, they urge the user to familiarize themselves with a new piece of software with new user interfaces, that are not always intuitive.\rSecond, and more importantly, these interfaces promote a statistical way of thinking that often leaves the user confused with what the ever-changing parameters (think of these \\(\\delta\\) , \\(d\\), \\(f\\), \\(f^2\\) and vague “group-size” and “measurement-point” fields) that need to be filled in mean.\rMoreover, these parameters differ for most designs and give an impression that power-analysis is complicated business better left to statisticians or that it might not be worth the effort.\n\r\rFigure 1. Me trying to figure out how to use a standard power-analysis software.\r\r\rHowever, this impression changed dramatically for me, once I changed my ways and started doing power analysis by simulation.\rMoreover, learning how to simulate data can of course not only be of use for power analysis but is a useful skill to in every research project.\rWhen we simulate data, we can see whether what we think about the data-generating process will actually result in the patterns that we would expect.\rIn other words, we can do theoretical experiments to see whether if everything goes as we would expect, we would also find the results that we would expect.\rEspecially when our analyses become more complex, all the different parts in our model tend to interact and it is easy to get lost.\rBy simulating data before conducting an experiment, we will be forced (and able) to specify more precisely how we think a theoretical model or prediction will be reflected in the data.\nThus, even though this tutorial will focus on simulating data for power analysis, you will learn a very useful skill on the side - simulating your own data and thereby conducting theoretical experiments before you even collect data.\rI know that there are already some excellent tutorials on data/power-simulation out there but they are often very brief and/or technical and assume a rather high level of prior knowledge about R and data-simulation in general.\rTherefore, I will spend some time on explaining theoretical concepts and slowly build up the simulation-code to hopefully enable the reader to understand the underlying principles and flexibly conduct power simulations themselves after reading this.\nThroughout the tutorial I assume readers are familiar with R and some of it’s base functionality.\rThis tutorial will consist of four different parts.\n\rIn the first part (the one you are reading) I will give a short overview of how power-analysis by simulation works on a conceptual level and why I prefer it to available power-analysis software, even though there are clear drawbacks that I will also briefly mention.\rMoreover, I will introduce the concept of power as I want to bring us all on the same page and want to give a (hopefully) intuitive example about what we actually do in power calculation and how it relates to the simulation techniques that we will use for the rest of the tutorial.\rIn the second part, I will discuss simulations for the simplest case of paired and two-sample t-tests.\rIn the third part, we will explore different ANOVA and regression designs.\rIn the fourth part we will move on to more complex mixed-effects and hierarchical models and even have a peak at Bayesian approaches to power analysis (well technically its not a power analysis but a true detection rate analysis).\rFor this fourth part, I assume readers will be familiar with how to fit mixed-effect models in lmer and/or brms.\r\rThis part of the tutorial is by far the most wordy and longest part.\rJust as a little motivator to keep in mind during this sometimes lengthy tutorial:\rAt the end of part IV of this tutorial, you will know how to do your own custom power analysis for mixed-effects models.\n\rPower Analysis by Simulation (a sustainable alternative)\r\r\rFigure 2. The proof that there are alternative ways to how we normally get our power.\r\r\r\rWhat is power again? A brief introduction\rAs my intention is to keep this post as short as possible (SPOILER: which definitely did not work), let’s directly dive into the topic by having a look at the definition of power:\nIf a certain effect of interest exists (e.g. a difference between two groups) power is the chance that we actually find the effect in a given study.\nTo provide some intuition about power, lets assume you toss a coin 10 times and you get 10 heads.\rShould you be surprised about this?\rIntuitively, it makes sense that we should be more surprised the more often we toss the coin and it keeps landing on head. 10 out of 10 heads would for example be less surprising than 10,000 out of 10,000, right?\rThis is exactly the question we want to answer when with power analysis1.\rHow often should we toss the coin until we are surprised enough to conclude that the coin is not fair.\nTo translate the above situation into a Frequentist null-hypothesis significance testing (NHST) scenario, we hypothesize that the coin is indeed fair (null-hypothesis) and see whether or not the observed number of heads (the observed data) fits with this hypothesis or not. If yes, we will retain the null-hypothesis that the coin is fair, if not, we will conclude that the data are very unlikely to result from tossing a fair coin.\nHow do we do this?\rWell, assume we observed 3 heads out of 3 total tosses.\rNow we can count all ways that this could have happened with a fair coin and compare it to all possible outcomes that our coin toss experiment might have produced.\rThese possibilities are (for a fair coin or any coin that cannot produce only heads or only tails):\n\r\r\rToss #1\rToss #2\rToss #3\rnumber of heads\r\r\r\rPossibility #1\rHEAD\rHEAD\rHEAD\r3\r\rPossibility #2\rHEAD\rHEAD\rTAIL\r2\r\rPossibility #3\rHEAD\rTAIL\rTAIL\r1\r\rPossibility #4\rTAIL\rTAIL\rTAIL\r0\r\rPossibility #5\rTAIL\rTAIL\rHEAD\r1\r\rPossibility #6\rTAIL\rHEAD\rHEAD\r2\r\rPossibility #7\rTAIL\rHEAD\rTAIL\r1\r\rPossibility #8\rHEAD\rTAIL\rHEAD\r2\r\r\r\rNotice that a possibility is not only defined by the number of heads and tails but also by the order in which they occur2. We can also calculate the number of possibilities as \\(2^x\\) where 2 means that we have 2 possible outcomes per toss and \\(x\\) is the number of tosses. In this case the number of possibilities is therefore \\(2^3 = 8\\).\rOnly 1 of these 8 events (Possibility 1) can produce 3 out of 3 heads.\rIf our coin is fair, each of these events should be equally likely and we can see that when flipping a fair coin 3 times, in only 1 out of 8 cases (12.5%) we will get 3 heads (Possibility 1).\nDo we find this surprising enough to conclude that the coin that we flipped is unfair?\rMaybe, maybe not.\rIf not, instead of flipping the coin three times, we could flip it 100 times.\rImagine we observed 55 heads in 100 flips.\rWe could now start writing down all possible outcomes, but that would take some time.\rThis time, there are not 8 but \\(2^{100}\\) = 1,267,651,000,000,000,000,000,000,000,000 possible sequences of heads and tails, and we would have to count the ones that produce at least 55 heads to see how often that would happen if our coin is fair3.\nHowever, luckily we are not the first who are interested in these kind of problems and we can make use of mathematical formulas that other people figured out for us.\nIn this case we need the binomial probability mass function.\rIn short, this function defines how often we can get each outcome, assuming a certain chance of getting heads or tails.\rIf you are interested in seeing this function and see how we can hand-code it in R, then click on the info-box below.\rIf you do not want to get too much into the technicalities here, you can also just read on.\n\n\r\r\rClick here to extend information about the binomial likelihood function\r\r\n\r\\[P(x)=\\frac{N!}{x!(N-x)!}\\pi^x(1-\\pi)^{N-x} \\]\nFor people who are not used to mathematical formulas, this might already look intimidating. However, all we need to know right now is that this formula gives us the probability of getting x heads \\(P{(x)}\\) (i.e. the number of ways we get x heads divided by N tosses):\rNote that \\(\\pi\\) in the above formula is not the one we might know from geometry but it is simply the Greek letter for p denoting a probability here.\rIn this case, it is the probability of either event, heads or tails, happening on each toss so it is 50% or 0.5.\rWe can fill this in for the example above:\n\\[P(55)=\\frac{100!}{55!(100-55)!}0.5^{55}(1-0.5)^{100-55}\\]\nTranslating this formula into R syntax we get the following:\nfactorial(100)/(factorial(55)*factorial(100-55))*0.5^55*(1-0.5)^(100-55) = 0.05\nHowever, before we said that we do not need the probability of exactly 55 heads but everything that is at least 55. In order to answer our question how often we get at least 55 heads, we could repeat the above calculation with all values from 55 up until 100 and add up the probabilities that we get.\nFor example we could do this with a for-loop:\n# first we write a function that calculates the probability for each number so we can call it in a loop\rpbinom2 \u0026lt;- function(N, x, p){\rfactorial(N)/(factorial(x)*factorial(N-x))*p^x*(1-p)^(N-x)\r}\rtosses_55to100 \u0026lt;- c(55:100) # we define the amount of heads that we want to check for (all bigger than or equal to 55)\rprobs \u0026lt;- c() # we will make an empty collection that we will add the results for each number of heads to\rfor(i in tosses_55to100){\rprobs \u0026lt;- append(probs, pbinom2(100,i,.5))\r}\rprint(probs[1:10])\r## [1] 0.048474297 0.038952560 0.030068643 0.022292270 0.015869073 0.010843867\r## [7] 0.007110732 0.004472880 0.002697928 0.001559739\rNow we got all the probabilities for each of the amounts of heads that we are interested in.\rBy summing them up we get what we need - the probability of getting at least 55 heads in 100 tosses, sum(probs) = 0.18 or 18 percent.\n\r\r\nAs mentioned, fortunately, the counting of possibilities is pre-implemented into R.\rRunning pbinom(x = 54, size = 100, prob = .5, lower.tail = FALSE) (I will explain below) we can get R to calculate the proportion of samples that would result in more than x times heads in an experiment of size 100 (i.e. tossing a coin 100 times).\rExecuting this in R we get 0.18.\nIn short, the pbinom function gives us the answer to the question \"what is proportion of possible toss-sequences that results in more than x = 544 heads if we toss a coin size=100 times if our hypothesis is that the coin is fair with a probability of heads of prob = .5.\rThe lower.tail = FALSE argument tells R that we want the the probability of the upper part of the probability mass (i.e. the probability of getting 55 or more heads rather than 54 or less).\rIn other words, every 6th out of the \\(2^{100}\\) possible sequences has 55 or more heads.\rAgain, this is not really surprising and would probably not make us conclude that a coin is definitely unfair.\nIf, for example, we think that a coin is unfair if the amount of heads (or more heads) has only a probability of .01 or 1 percent, what amount of heads would allow us to draw such a conclusion when tossing a coin 100 times?\rTo solve this, we can just use the pbinom function for not only x = 55 heads but also 56 up to 100 heads, and see from which point onwards only 1 percent of all \\(2^{100}\\) sequences include so many heads.\nThe code below does exactly this.\rConveniently the pbinom function cannot only evaluate 1 value at the same time but we can just pass all values that we want to try as a sequence and it will give us the probability of x heads for each of them so we can store them as a collection of values.\rWe can plot these values to see when we cross the 1 percent line.\nn_heads \u0026lt;- 54:99 # all possible amount of heads that we want to try.\rp_heads \u0026lt;- pbinom(q = n_heads, size = 100, prob = .5, lower.tail = F) # get pbinom to show us the probability of so many heads for each of the values if a coin is fair\rplot(n_heads, p_heads)\rabline(h = .01)\rabline(v = n_heads[p_heads \u0026lt; .01][1])\rUsing the above we see that the at 62 tosses, i.e. the 9th element of the vector is the first probability that is smaller than .01, in this case 0.006.\rIn other words, getting 62 or more heads in 100 tosses would only happen extremely rarely, in 1 out of 62 cases.\rThus actually getting 62 heads is pretty surprising and if something like that happened we might conclude that a coin is unfair.\nHowever, instead of following the approach above, there is an easier way to get the number of heads that would surprise us by using the qbinom function that gives us the quantile (i.e. number of heads or more heads) that would only happen with a certain probability: qbinom(p = .01, size = 100, prob = .5, lower.tail = FALSE) = 62, unsurprisingly gives us the same result.\n\r\rBack to Power\rIn this coin-toss example, we run a statistical test about the fairness of the coin.\rBut what is the power of the test here (in case you forgot during my very long “brief” introduction, this post was about power)?\nActually, we already used three concepts from Frequentist statistical testing:\n\rThe null-hypothesis: we assumed that the coin is fair\rThe p-value : the probability that we calculated above when checking how likely 62 or more heads are (we got 0.006).\rThe alpha level : (i.e. where people conventionally use .05 in psychological literature5) is the threshold that we picked for concluding it would surprise us enough to say that the coin must be unfair, i.e. the probability of .01. In other words, it is the chance that we conclude that a coin is unfair even if it is actually fair (the one percent of cases where 62 or more heads would happen even with a fair coin).\r\rIn a proper power analysis, all of these need to be specified in addition to an alternative hypothesis. Let’s give it a try and specify them to run a power-analysis\nSpecifying the null-hypothesis.\rAgain, we will assume that a coin is fair and will produce heads with a probability of .506.\n\rSpecifying the Alternative Hypothesis aka Effect Size.\rTo conduct a proper power-analysis, it is important that we specify a concrete alternative hypothesis (or effect size).\rIf we do know have a hypothesis about the effect size, we can by definition not know the power to investigate this hypothesis.\rMakes sense, right?\nThis means we will try to think about an effect size that would be meaningful in this coin flip example.\rFor instance, if you use the coin to make an important decision, i.e. when the fairness of the coin is very important (see e.g. Figure 3)7 you would probably want to be very strict about when a coin is unfair and would like to, for instance, already conclude that it is unfair at 55% percent heads, a deviation from a truly fair coin of 5%.\n\rMost software packages use effect-size estimates like Cohen’s d or f or other standardized effect sizes.\rWe will have a look at how to do this with simulations briefly in the second part of the tutorial, but throughout this tutorial, we will mostly follow a different approach by trying to specify the expected effect size on the raw scale.\r\r8\n\rSpecifying the alpha-level\rFurthermore, as it does not deem you a good idea to get into a fight with Harvey (Figure 3) by incorrectly accusing him of using an unfair coin, you want the chance of this happening (i.e. the alpha-level) to be very low at only 0.1 percent (1 in a 1000 cases)9.\n\rSpecifying the desired power\rMoreover, you also want to be sure that you would detect the unfairness of 55% if it is actually there.\rLet’s say you only want to have a 10 percent chance of not detecting it if it was there.\r100 minus this chance is the power of our coin-toss study, i.e. 90 percent (or 1-.10 on the probability scale).\n\r\rFigure 3. An illustrative example of when a coin-toss really matters.↩︎\r\r\r\nTo summarize, our test has the following properties:\n\ralpha-level = .001\ralternative hypothesis (aka effect size / fairness-criterion) = 55% heads\rpower = .90\r\rOur job now is to figure out at which number of tosses we can be 90% sure to detect the unfairness of 55% with only a 0.1% chance of getting into a fight with Harvey by wrongly accusing him of unfairness.\nTo do this we can use the following r-code (I will explain below)\n\rThe first Power Calculation\rpower_at_n \u0026lt;- c(0) # initialize vector that stores power for each number of tosses\rn_heads \u0026lt;- c() # save \u0026quot;critical\u0026quot; number of heads for that toss-amount that would result n_toss \u0026lt;- 2 # initialize the toss-counter\rwhile(power_at_n[n_toss-1] \u0026lt; .90){ # continue as long as power is not 90%\rn_heads[n_toss] \u0026lt;- qbinom(.001, n_toss, .5, lower.tail = F) # retrieve critical value\rpower_at_n[n_toss] \u0026lt;- pbinom(n_heads[n_toss], n_toss, .55, lower.tail = F) # calculate power (1-beta) for each coin-toss\rn_toss \u0026lt;- n_toss+1 # increase toss-number }\rThe above loop needs some explanation.\rIt increases the toss-amount n_toss by 1 as long as it has not yet reached 90% power.\rTo do this, we again use the qbinom function to find the number of heads (or more heads) that would only occur with a probability of .001.\rIn other words, only 0.1% of the possible coin toss sequences would result in that specific amount of heads when tossing the coin n_toss times.\rThis is the same thing we did earlier with a fixed amount of 100 tosses.\nin the next line, we take this amount of heads that only occurs with a probabiltiy of .001 for the current toss amount n_toss and use pbinom to calculate the probability of getting at least this many heads with our hypothesized unfair coin that produces heads in 55% of the cases.\rThis means, we calculate the percentage of coin toss sequences that contain at least this many heads.\rThis probability is the power of the test.\rWhy?\rBecause if 90% of the sequences contain 55% or more heads, if we take the coin and toss it n_toss times,in 90% of the cases we will get one of those sequences that contain 55% or more heads.\nLets have a look at two of the values from this calculation to make this more clear.\rFor instance, lets look at the values when the loop tried out 100 tosses:\nn_heads[100] = 65. This number is higher than the 62 heads we had above, as we are more strict now by specifying a stricter alpha level (.001 instead of .01).\rNext, this 65 was passed on to the pbinom function and we can look at the power, power_at_n[100] = 0.02.\rAt this point we only have a power of .02 or 2%.\rThis means that tossing an unfair coin that would give 55% heads 100 times, only 2% of the sequences would contain 55 or more heads, therfore making it unlikely that we would detect the unfairness.\rWhen we increase the number of tosses until the loop stops, we are at n_toss-1 = 1908 coin tosses.\rAt this number of tosses, the amount of heads that would make us conclude that a fair coin is unfair (biased with 55% heads) with only 0.1% chance of being wrong is n_heads-[n_toss-1] = 1021.\rThus in this case, with 1908 tosses, if we get 1021 heads or more, we conclude that the coin is unfair.\rWhat is the chance of getting at least that with our unfair coin?\rThat’s what the pbinom function in the loop above tells us and it is power_at_n[n_toss-1] = 0.9, our specified 90%.\rWe can also plot the power for each number of tosses that we tried in the loop.\rFigure 4 shows the increase in power with increasing sample-size.\n\rplot(1:(n_toss-1), power_at_n, xlab = \u0026quot;Number of coin-tosses\u0026quot;, ylab = \u0026quot;Power\u0026quot;, axes = FALSE)\rabline(h = .90, col = \u0026quot;red\u0026quot;)\raxis(side = 1, at = seq(0,(n_toss-1),by=100))\raxis(side = 2, at = seq(0,1,by=0.1))\r\rFigure 4. Change in power until we reach 90% indicated by the red horizontal line.\r\r\r\nThus, when tossing a coin 1908 times10, in 90% of the cases we will be able to tell it’s biased and can confidently confront Harvey like shown in Figure 5.\n\r\rFigure 5. Confronting Harvey and telling him what we think about his coin.\r\r\rIf you are not familiar with using these distribution functions (qbinom, pbinom etc.) in R, this might have been a lot of new information but this is basically what we do in power analysis:\nWe specify a null-hypothesis, an alternative hypothesis, an alpha-level and a desired power,\rWe try a small sample-size.\rWe retrieve the critical value, (the number of heads that would be more surprising than what we specified as our alpha-level).\rWe calculate the probability that the amount of heads that would make us reject the null-hypothesis would be observed with the unfair coin according to the alternative hypothesis.\rWe stop as soon as this probability is equal to the desired power.\r\r\r\rFinally, an actual power simulation.\rSo far, we have not done any simulation but have merely analytically derived the power by making use of the binomial probability mass function11.\rThus, for easy toy-examples like this one we would not need to do a simulation.\rHowever, as soon as we deal with real examples, it is much more difficult to make use of this approach and if we have several predictors in our model, or if we deal with mixed-effect models or hierarchical models (as we will do in part IV of this tutorial) the above method is not feasible anymore.\nWhat we can do however, for any model of any complexity and form, is to actually pretend we were repeatedly doing the experiment for each sample size and see how often we would be able to reject the null-hypothesis.\rFor instance we could toss a coin 20 times and test whether we would reject the null-hypothesis.\rWe could then repeat this process for 20 tosses very often, e.g. 1,000 times and see what the probability is that we would conclude that the null-hypothesis is false12.\rThis is what we do in power-simulation.\nAn obvious disadvantage is that instead of just calculating the power for each toss-amount (i.e. sample-size) only once, we need to try each toss-amount out 1,000 times.\rThus, simulation takes much longer than a regular power-calculation, especially with more complex models and high sample-sizes.\rHowever, the advantage of the method is that we can just learn it once and adjust it for any situation that we will ever find ourselves in, not having to ever walk through tedious interfaces again, selecting arbitrary analyses and setting ever changing parameters to certain values.\rAnother advantage (that will be discussed in detail later) is that we do not need to specify a precise alternative hypothesis and test it for that single value, but that we can actually remain more vague about what our alternative hypothesis (i.e. the effect size that we expect) will be.\rOftentimes we do not know exactly what effect-size we can expect and we might like to tell the power-analysis about this uncertainty.\nAt last, let us do a power-simulation for the above example.\rLuckily we do not really have to toss a coin as R can do that for us by using the rbinom function, that will as often as we call it do a coin-tossing experiment for us with a specified sample-size.\rLets first see how the rbinom function works if we would want to toss a coin 20 times.\nset.seed(1) # make sure our simulation will give the same results if you try it\rrbinom(n = 1, size = 20, prob = .50) # let r do 1 experiment with 20 coin tosses of a fair coin\r## [1] 9\rIn the above code, R tossed a coin 20 times and it resulted in 9 heads.\rWe could repeat this experiment again:\nset.seed(2) # make sure our simulation will give other results than before\rrbinom(n = 1, size = 20, prob = .5) # run the experiment again\r## [1] 8\rIn this case, giving us 8 heads.\rBy increasing the first argument to the rbinom function, we can tell R to repeat this experiment more often.\rMoreover, we can tell it to make use of an unfair coin directly, so we can directly put our alternative hypothesis in the simulation by changing the last number of the rbinom function from .50 to .55, to do the same test as above.\nset.seed(1)\rn_heads \u0026lt;- rbinom(n = 1000, size = 20, prob = .55) # run 1,000 experiments, of 20 coin tosses each, at once\rstr(n_heads) # show structure of vector\r## int [1:1000] 12 12 11 8 13 8 7 10 10 14 ...\rNow, R repeated the 20 coin-toss experiment 1,000 times with an unfair coin of 55% chance of resulting in heads giving us 1,000 times the amount of heads that it got.\rLet us again now test how big our power was in this case, again with an alpha-level of .001.\np_heads \u0026lt;- pbinom(n_heads, 20, .50, lower.tail = F) # calculate the probability of observing this many heads if the coin would be fair (which it is not cause we simulated with 55% heads)\rexp_power \u0026lt;- mean(p_heads \u0026lt; .001) # check where this chance drops below our alpha level\rThe first line in the above code does exactly what we did earlier, just with a little change.\rWe take the amounts of heads that we got from an unfair coin, and check in how many cases we would conclude - assuming that the coin would actually be fair, thus using .50 as the probability in pbinom - that the observed amounts of heads is too unlikely for us to believe that the coin was fair.\rWe save these probabilities to a vector.\rThe second line calculates the observed power of our experiment.\rTo understand what it does, let us have a look at the vector p_heads it looks the following (here only the first 10 out of 1,000 values):\np_heads[1:10]\r## [1] 0.13158798 0.13158798 0.25172234 0.74827766 0.05765915 0.74827766\r## [7] 0.86841202 0.41190147 0.41190147 0.02069473\rAs shown above, the p_heads vector contains the probability of observing each amount of heads n_heads from our 1,000 experiments assuming the experiment was done with a fair coin (which it was not).\rNow we would like to check how many of these probabilities are at least as small as our alpha-level, i.e. surprising enough to conclude the coin was not fair.\rWe do this by checking for each value whether it was .001 or smaller (p_heads \u0026lt; .001).\rThis will result in another vector of 0 when the condition is false and 1 when the condition is true13.\rTaking the mean of this vector will give us the probability of rejecting the null-hypothesis while we actually know it is incorrect (as we put the bias in the coin ourselves).\rAgain, this will give us the power.\rIn the present case with 20 coin-tosses the power is exp_power = 0.004 or 0.4 percent.\rThis is obviously very low and not surprising given that we already know from the calculation above that we need a lot more coin-tosses than 20 to get the desired power of 90%.\rTo get to our desired power in this example, we need to change the code above so it will try different sample-sizes again.\nset.seed(1)\rexp_power_at_n \u0026lt;- c(0) # create a vector where we can store the power for each sample-size\rn_toss_start \u0026lt;- 19 # start at 21 tosses\rn_toss_loop \u0026lt;- 2 # additional number of tosses tried (above 20)\rwhile(exp_power_at_n[n_toss_loop-1] \u0026lt; .90){ # continue increasing the sample-size until power = 90%\rn_toss \u0026lt;- n_toss_start+n_toss_loop # calculate the current number of tosses\rn_heads \u0026lt;- rbinom(1000, n_toss, .55) # run 1000 experiments for any given number of tosses and store number of heads\rp_heads \u0026lt;- pbinom(n_heads, n_toss, .50, lower.tail = F) # calculate the probability of getting at least that many heads if the coin would be fair exp_power_at_n[n_toss_loop] \u0026lt;- mean(p_heads \u0026lt; .001) # calculate power by checking what proportion of the probabilities is smaller than or equal to our alpha-level\rn_toss_loop = n_toss_loop+1\r}\rexp_power_at_n \u0026lt;- exp_power_at_n[-1] # remove the first 0 that we used to populate the vector for the first iteration of the loop\rThe above code is similar to what we have done earlier when we tried only 1 sample-size.\rThis time, we iterate over different sample-sizes in a loop and store the power for each in the vector exp_power_at_n.\rAs in the earlier calculation, we can now use this to see how many tosses we would need by having a look at where the loop stopped, i.e. when it reached 90% power, which is at n_toss-1 = 1795 tosses at which the power was exp_power_at_n[length(exp_power_at_n)] = 0.903.\rWe can also plot all these values again as done in Figure 6.\n\rplot(21:n_toss, exp_power_at_n, xlab = \u0026quot;Number of coin-tosses\u0026quot;, ylab = \u0026quot;Power\u0026quot;, ylim = c(0,1), axes = FALSE)\rabline(h = .90, col = \u0026quot;red\u0026quot;)\raxis(side = 1, at = seq(0,(n_toss),by=100))\raxis(side = 2, at = seq(0,1,by=0.1))\r\rFigure 6. Observed power in the simulation.\r\r\rThe shape of the line looks very similar to the earlier calculation, however the line appears to be thicker.\rMoreover, it might be surprising that we did not get the same amount of tosses that we got from the calculation.\rActually they differ quite a lot (1908 vs. 1795).\rThis is due to the fact that even when running 1,000 experiments for each sample-size there is still imprecision in the simulation.\rEach coin-flip is random and even if we repeat a experiment 1,000 times this randomness is still in there (think of how many possible sequences there would be!).\rThis randomness is why we cat a different number in the simulation and why the line in Figure 6 is thicker than in Figure 4.\nIf we want to approach the results of the calculation more closely in our simulation (i.e. get a more precise power-estimate) we can increase the number of experiments that R will run per sample-size (i.e. the number of simulations).\rFor example, we could repeat the simulation with 100,000 experiments per sample-size.\rYou have to be patient here, this already takes a few minutes maybe.\nset.seed(1)\rexp_power_at_n \u0026lt;- c(0) # create a vector where we can store the power for each sample-size\rn_toss_start \u0026lt;- 19 # start at 21 tosses\rn_toss_loop \u0026lt;- 2 # additional number of tosses tried (above 20)\rwhile(exp_power_at_n[n_toss_loop-1] \u0026lt; .90){ # continue increasing the sample-size until power = 90%\rn_toss \u0026lt;- n_toss_start+n_toss_loop # calculate the current number of tosses\rn_heads \u0026lt;- rbinom(100000, n_toss, .55) # run 1000 experiments for any given number of tosses and store number of heads\rp_heads \u0026lt;- pbinom(n_heads, n_toss, .50, lower.tail = F) # calculate the probability of getting at least that many heads if the coin would be fair exp_power_at_n[n_toss_loop] \u0026lt;- mean(p_heads \u0026lt; .001) # calculate power by checking what proportion of the probabilities is smaller than or equal to our alpha-level\rn_toss_loop = n_toss_loop+1\r}\rexp_power_at_n \u0026lt;- exp_power_at_n[-1] # remove the first 0 that we used to populate the vector for the first iteration of the loop\rIf you run this code, you will see that it took substantially longer than the previous simulation with only 1,000 repetitions.\rIf we now look at the outcome again we find that the number of tosses n_toss-1 = 1870 is already slightly closer to the calculated value but still not exactly the same.\rIn my personal opinion, this imprecision is both advantage of simulation as well as disadvantage.\rIt is a disadvantage in that it is less precise than the calculation above in theory.\rHowever, it is an advantage as it adds some noise to the power-estimation process that is actually also present in real life.\rThis is, even if there is an effect in the population, each new sample will always be different which is also the case in the simulation.\rIf we look at Figure 7, we also see that now the power-increase follows a more straight line again that is very close to the one from the exact calculation and not as thick anymore as in Figure 6.\n\rplot(21:n_toss, exp_power_at_n, xlab = \u0026quot;Number of coin-tosses\u0026quot;, ylab = \u0026quot;Power\u0026quot;, ylim = c(0,1), axes = FALSE)\rabline(h = .90, col = \u0026quot;red\u0026quot;)\raxis(side = 1, at = seq(0,(n_toss),by=100))\raxis(side = 2, at = seq(0,1,by=0.1))\r\rFigure 7. Power curve for a more precise simulation.\r\r\r\rSummary\rIn this part of the tutorial I tried to bring us all on the same page about why we would do data or power simulation and how it is related to exact power calculation.\n\rIn principle, in power calculation we count the amount of potential data sequences (e.g. possible sequences of HEADS-TAILS in coin-tosses) that could happen in an experiment of a specific size (e.g. amount of coin-tosses).\rAfterwards, we calculate the critical value (e.g. number of heads) that would make us reject the null-hypothesis (e.g. a coin is fair) as only a very small percentage of sequences (“small” is defined by the alpha-level here) would surpass the critical value.\rFinally, we calculate the percentage of sequences according to the alternative hypothesis (e.g. a coin is unfair with a bias of 55%) that would surpass the critical value.\rThis is the power of our test.\r\rIn power-simulation we do something very similar, but instead of calculating how many possible data sequences there are and how many of them result in a critical value, we just try this out a lot of times until we get an approximation of how often we would observe data that are inconsistent with the null-hypothesis given our specified alpha-level.\nI hope you forgive my rather lengthy introduction on power-analysis before actually doing the simulation, as I thought it would be a good foundation before we move on to more complex and realistic situations.\n\rIn part II of this tutorial, we will move on to these more realistic situations that we might actually be interested in psychology by looking at how we do simulations for t-tests.\rIn part III we will continue with ANOVA and regression designs.\rIn part IV we will look at mixed-effects/multilevel models.\r\r\rFootnotes\r\r\rThe answer to the question - Should we be surprised - is basically what we get when we do a statistical test and inspect the p-value.\rOk, this is not exactly true but p-values can actually be expressed in terms of how surprised we should be about an observation, given a certain hypothesis (e.g. when we assume no difference between groups as the null-hypothesis).\rTo read an awesome explanation about this, look at this really cool blog-post about s-values by Zad Chow.↩︎\n\rWhy is the order important here?\rBecause orders do identify unique outcomes.\rIf we do not consider entire sequences, we might be inclined to think that there are only four possibilities: 3xHEADS, 2xHEADS, 1xHEADS and 0xHEADS, and that each of these events is equally likely.\rHowever, how likely each of these events is depends on how many different sequences can produce it.↩︎\n\rI looked it up and apparently this number (a one followed by 30 zeros) is called a Nonillion. It is so big, that apparently the number of bacterial cells on earth is estimated at 5 Nonillion.\rSo I do not recommend trying to write down all possibilities…↩︎\n\rR excludes the first number here, so that is why we start at 54 rather than 55↩︎\n\rNotice however, that this alpha-level of .05 implies that we are surprised enough if something only happens in 1 out of 20 cases.\rThere have, however, been repeated calls to change the standard alpha-level, to justify it based on the specific situation you are in or to abandon it all together alongside other ideas of using alternatives like the Bayes-Factor.\rFor the most part, in this tutorial I will try to justify the alpha that I choose and to stay away from the “magical” .05 as I agree with the justification approach in that we should at least try and think harder about the alpha-level and it’s meaning.↩︎\n\rIt might be confusing that i say “specify” a null-hypothesis here.\rIs the null-hypothesis not by definition that there is no difference, i.e. that the coin is fair at 50%.\rWell, yes and no.\rOf course assuming coin-fairness is the most logical thing to do here but in real life, no matter what research question you are investigating, you will close to always find a difference between groups.\rIf you keep increasing the sample size, at some point the effect will always be significant, no matter how small the deviation is.\rThis is, we could even find the unfairness of the coin if it is only 51%.\rBut is this 51% really big enough to care about?\rMaybe, maybe not, but we can define a smallest effect size of interest and use Equivalence testing in which the null-hypothesis is a certain range of small deviations from the actual point of no-difference in which we say that the effect is too small to care about.\rEquivalence testing is not new but surprisingly unknown and/or uncommon in the psychological literature.\rIf you are interested in Equivalence Testing, you should check out the great paper(s) and blog-post(s) about it by Daniel Lakens and colleagues.↩︎\n\rFor those unfamiliar with this reference: Consider watching Dark Knight, it’s a great movie. In short, the displayed character, Harvey Dent, a former state lawyer, falls from grace and and loses his faith in the law system. He takes the law into his own hands and decides whether people will be sentenced (i.e. killed) by tossing a coin.↩︎\n\rSoftware like G*Power often uses different standardized effect sizes for different analyses.\rHowever, in many cases standardized effect-sizes can be converted into each other.\rIf you ever need to do such a thing, Hause Lin made a nice conversion app.↩︎\n\rThereby justifying our alpha-level in this toy example.↩︎\n\rThis might be a good point to open G*Power (maybe for the last time ever), to see whether you get the same conclusions there (spoiler: you will, and if not, that only shows that software like this is not necessarily easier to use).↩︎\n\rYou can see that is it not a simulation as you will always get the exact same result whenever you run the code above.↩︎\n\rIn other words, instead of writing all possible coin-toss sequences down and counting how many of them would produce 55% heads with a certain amount of tosses, we could just run very many experiments in which we for example throw a coin 20 times.\rIf we repeat these 20 tosses 1,000 times, we get an approximation of how many heads the toss sequences produce on average.↩︎\n\rTechnically the vector contains FALSE instead of 0 and TRUE instead of 1. However, in R, and many other programming languages, the two are interchangeable, allowing us to calculate the mean in the same way.↩︎\n\r\r\r","date":1587513600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1593625538,"objectID":"aa86b66bc5d65f818c902d58df6501e8","permalink":"https://julianquandt.com/post/power-analysis-by-data-simulation-in-r-part-i/","publishdate":"2020-04-22T00:00:00Z","relpermalink":"/post/power-analysis-by-data-simulation-in-r-part-i/","section":"post","summary":"This part provides an introduction, some background on power-calculation and data-simulation.","tags":["power","data-simulation","R"],"title":"Power Analysis by Data Simulation in R - Part I","type":"post"},{"authors":["Julian Quandt"],"categories":["phd-project"],"content":"","date":1576108800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579194594,"objectID":"0cbacfe6a594003be764909c75223eef","permalink":"https://julianquandt.com/talk/confidence-in-vbd/","publishdate":"2019-12-12T00:00:00Z","relpermalink":"/talk/confidence-in-vbd/","section":"talk","summary":"When people make decisions in everyday-life, these decisions are usually accompanied by a feeling of confidence whether the choice that was made was correct. For example, a person can feel more or less confident to have given the correct answer on trivia-question. It is commonly believed that for a given decision problem, confidence reflects the clarity of the evidence that a decision was based on. This is, decisions in which the evidence is less clear (e.g. conflicting information about a trivia-question) result in lower confidence. It has been shown that confidence predicts how likely people are to stick with an opinion or how likelythey are to engage in related future decision-scenarios.\nHowever, confidence has not yet been extensively studied in common value-based decision problems in which people evaluate, or decide between objects such as foods or other consumer goods. It has been suggested that in these decisions, the evidence that people use are prior experiences with the goods. However, it is still unknown how confidence is constructed from these experiences when evaluating or choosing between objects. In three preregistered experiments (n = 62, n = 60, n = 60) we investigated the question whether confidence reflects the diversity of prior experiences with objects and how they relate to choice-behavior. We find that for novel and real-life food objects, more diverse prior experiences relate to lower confidence when evaluating objects and deciding between them. This is relevant to understanding consumption-behavior and attitude formation and stability.","tags":["confidence","values","value-based decisions","sequential sampling"],"title":"Confidence in Values and Value-based Choice @ ASPO 2019","type":"talk"},{"authors":["Julian Quandt"],"categories":["statistics"],"content":"","date":1573171200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579194048,"objectID":"aa779006cb0736ec33787a75d1417ba2","permalink":"https://julianquandt.com/talk/extending_stats_toolbox/","publishdate":"2019-11-08T00:00:00Z","relpermalink":"/talk/extending_stats_toolbox/","section":"talk","summary":"What we often forget when making use of statistics in our daily research practice is that statistics itself is a rapidly developing research field that is rapidly progressing. For instance, in recent yearsBayesFactors have been proposed asan alternative to p-values and their adaptation has quickly increased in psychological papers in recent years with many scholars claiming that they should become the standard way of statistical inference. However, while people start to adopt Bayes Factors quickly, there are problems and challenges that they might often go unnoticed. Furthermore, many Bayesian statisticians themselves say that we should not use p-values and BayesFactorsand suggest yet other alternatives.","tags":["statistics","statistical testing","p-value","bayes factor"],"title":"Extending the Statistical Toolbox @ BSI PhD-Day 2019","type":"talk"},{"authors":["Zhang Chen","Rob W. Holland","Julian Quandt","Ap Dijksterhuis","Harm Veling"],"categories":null,"content":"","date":1569888000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569888000,"objectID":"7cfbd38a9c552d6c4dfc1cdf7de74141","permalink":"https://julianquandt.com/publication/chen-when-mere-action-2019/","publishdate":"2020-01-16T16:26:19.362758Z","relpermalink":"/publication/chen-when-mere-action-2019/","section":"publication","summary":"","tags":null,"title":"When Mere Action versus Inaction Leads to Robust Preference Change","type":"publication"},{"authors":["Harm Veling","Zhang Chen","Huaiyu Liu","Julian Quandt","Rob W. Holland"],"categories":null,"content":"","date":1567296000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567296000,"objectID":"1b2553401cf029448bba13b9e939c909","permalink":"https://julianquandt.com/publication/veling-updating-pcurve-analysis-2019/","publishdate":"2020-01-16T16:31:32.225589Z","relpermalink":"/publication/veling-updating-pcurve-analysis-2019/","section":"publication","summary":"","tags":null,"title":"Updating the P-Curve Analysis of Carbine and Larson with Results from Preregistered Experiments","type":"publication"},{"authors":["Johannes Algermissen","Julian Quandt"],"categories":["statistics"],"content":"","date":1562630400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579193578,"objectID":"8ef08ea32bf0460a19786a9bf3634789","permalink":"https://julianquandt.com/talk/brms-at-sips/","publishdate":"2019-07-09T00:00:00Z","relpermalink":"/talk/brms-at-sips/","section":"talk","summary":"In statistics classes, students often learn a zoo of different models, without grasping how those all link together. In consequence, they often fit several models, one for each research question. Hierarchical/ multi-level/ mixed-effects models constitute a unifying framework that allows to address many questions in a single model, including questions that are not easily answered with standard ANOVAs (e.g. trial-by-trial effects). However, this increased flexibility comes at the costs of more complex computation. We will discuss the logic and benefits/ pitfalls of using mixed-effects models, and then introduce Markov chain Monte Carlo (MCMC) as a particularly suited fitting algorithm. We will introduce the R package brms, an easy-to-handle wrapper for fitting Bayesian mixed-effects models using MCMCs in the language Stan.","tags":["brms","bayesian statistics","mixed-effect models"],"title":"Introduction to `brms` @ SIPS 2019","type":"talk"},{"authors":["Julian Quandt","Rob W. Holland","Zhang Chen","Harm Veling"],"categories":null,"content":"","date":1546300800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1546300800,"objectID":"3651ca96f085e6b7d89bca96b635b1b5","permalink":"https://julianquandt.com/publication/quandt-role-attention-explaining-2019/","publishdate":"2020-01-16T16:26:19.364752Z","relpermalink":"/publication/quandt-role-attention-explaining-2019/","section":"publication","summary":"","tags":["Appetite","Attention","Food","Motor Processes","Perceptual Motor Learning","Responses","Training"],"title":"The Role of Attention in Explaining the No-Go Devaluation Effect: Effects on Appetitive Food Items","type":"publication"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"https://julianquandt.com/project/external-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":["Demo"],"title":"External Project","type":"project"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"8f66d660a9a2edc2d08e68cc30f701f7","permalink":"https://julianquandt.com/project/internal-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/internal-project/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Internal Project","type":"project"}]