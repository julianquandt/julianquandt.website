<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Julian Quandt</title>
    <link>https://julianquandt.github.io/post/</link>
      <atom:link href="https://julianquandt.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Thu, 16 Jan 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>Posts</title>
      <link>https://julianquandt.github.io/post/</link>
    </image>
    
    <item>
      <title>Power Analysis by Data Simulation in R - Part I</title>
      <link>https://julianquandt.github.io/post/power-analysis-by-data-simulation-in-r-part-i/</link>
      <pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://julianquandt.github.io/post/power-analysis-by-data-simulation-in-r-part-i/</guid>
      <description>


&lt;html&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;https://julianquandt.github.io/css/style.css&#34; /&gt;
&lt;/html&gt;
&lt;div id=&#34;power-analysis-by-data-simulation-in-r---part-i-theoretical-introduction-to-simulation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Power Analysis by Data Simulation in &lt;code&gt;R&lt;/code&gt; - Part I: Theoretical introduction to simulation&lt;/h1&gt;
&lt;div id=&#34;why-this-blog&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Why this blog?&lt;/h2&gt;
&lt;p&gt;In recent years, power-analysis has become a standard tool in the behavioral sciences.
With an ongoing replication crisis, high-power research is the a key to improving replicability and to improving the reliability of findings.
Especially with preregistration slowly becoming standard practice in psychology, power-analysis, the practice of estimating the required sample-size a-priori, is a more important step than ever to plan research projects accordingly.&lt;/p&gt;
&lt;p&gt;Not so long ago, power-analysis was a rather complicated endeavor urging people to use algebraic solutions to calculate power of planned studies which can be demanding especially for non-trivial designs (i.e. basically anything that is not a correlation).
Luckily, for many research designs power-analysis is nowadays readily available in software packages such as &lt;a href=&#34;http://www.gpower.hhu.de/&#34;&gt;G*Power&lt;/a&gt; and even for relatively complex designs in specialized tools such as the &lt;em&gt;great&lt;/em&gt; &lt;a href=&#34;https://jakewestfall.shinyapps.io/pangea/&#34;&gt;PANGEA&lt;/a&gt; tool for all kinds of generalized ANOVA designs and other tools by &lt;a href=&#34;http://jakewestfall.org/&#34;&gt;Jake Westfall&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, while these tools are really great they also have (in my personal opinion) two drawbacks.
First, they urge the user to familiarize themselves with a new piece of software with new user interfaces, that are not always intuitive.
Second, and more importantly, these interfaces promote a statistical way of thinking that often leaves the user confused with what the ever-changing parameters (think of these &lt;span class=&#34;math inline&#34;&gt;\(\delta\)&lt;/span&gt; , &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(f^2\)&lt;/span&gt; and vague “group-size” and “measurement-point” fields) that need to be filled in mean.
Moreover, these parameters differ for most designs and give an impression that power-analysis is complicated business better left to statisticians or that it might not be worth the effort.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;https://julianquandt.github.io/img/power-tutorial/me-doing-pa.jpg&#34; alt=&#34;drawing&#34; width=&#34;500&#34;/&gt;
&lt;figcaption&gt;
&lt;em&gt;Figure 1. Me trying to figure out how to use a standard power-analysis software.&lt;/em&gt;
&lt;/figcaption&gt;
&lt;figure&gt;
&lt;p&gt;However, this impression changed dramatically for me, once I changed my ways and started doing power analysis by simulation.
Moreover, learning how to simulate data can of course not only be of use for power analysis but is a useful skill to in every research project.
When we simulate data, we can see whether what we &lt;em&gt;think&lt;/em&gt; about the data-generating process will acturally &lt;em&gt;result&lt;/em&gt; in the patterns that we would expect.
In other words, we can do theoretical experiments to see whether if everything goes as we would expect, we would also find the results that we would expect.
Especially when our analyses become more complex, all the different parts in our model tend to interact and it is easy to get lost.
By simulating data before conducting an experiment, we will be forced (and able) to specify more precisely how we think a theoretical model or prediction will be reflected in the data.&lt;/p&gt;
&lt;p&gt;Thus, even though this tutorial will focus on simulating data for power analysis, you will learn a very useful skill on the side - simulating your own data and thereby conducting theoretical experiments before you even collect data.
I know that there are already some excellent tutorials on data/power-simulation out there but they are often very brief and/or technical and assume a rather high level of prior knowledge about &lt;code&gt;R&lt;/code&gt; and data-simulation in general.
Therefore, I will spend some time on explaining theoretical concepts and slowly build up the simulation-code to hopefully enable the reader to understand the underlying principles and flexibly conduct power simulations themselves after reading this.&lt;/p&gt;
&lt;p&gt;Throughout the tutorial I assume readers are familiar with &lt;code&gt;R&lt;/code&gt; and some of it’s base functionality.
This tutorial will consist of four different parts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the first part (the one you are reading) I will give a short overview of how power-analysis by simulation works on a conceptual level and why I prefer it to available power-analysis software, even though there are clear drawbacks that I will also briefly mention.
Moreover, I will introduce the concept of power as I want to bring us all on the same page and want to give a (hopefully) intuitive example about what we actually do in power calculation and how it relates to the simulation techniques that we will use for the rest of the tutorial.&lt;/li&gt;
&lt;li&gt;In the second part, I will discuss simulations for the simplest case of paired and two-sample t-tests.&lt;/li&gt;
&lt;li&gt;In the third part, we will explore different ANOVA and regression designs.&lt;/li&gt;
&lt;li&gt;In the fourth part we will move on to more complex mixed-effects and hierarchical models and even have a peak at Bayesian approaches to power analysis (well technically its not a power analysis but a true detection rate analysis).
For this fourth part, I assume readers will be familiar with how to fit mixed-effect models in &lt;code&gt;lmer&lt;/code&gt; and/or &lt;code&gt;brms&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This part of the tutorial is by far the most wordy and longest part.
Just as a little motivator to keep in mind during this sometimes lengthy tutorial:
At the end of part IV of this tutorial, you will know how to do your own custom power analysis for mixed-effects models.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;power-analysis-by-simulation-a-sustainable-alternative&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Power Analysis by Simulation (a sustainable alternative)&lt;/h2&gt;
&lt;figure&gt;
&lt;img src=&#34;https://julianquandt.github.io/img/power-tutorial/new-power.jpg&#34; width=&#34;500&#34;/&gt;
&lt;figcaption&gt;
&lt;em&gt;Figure 2. The proof that there are alternative ways to how we normally get our power.&lt;/em&gt;
&lt;/figcaption&gt;
&lt;figure&gt;
&lt;/div&gt;
&lt;div id=&#34;what-is-power-again-a-brief-introduction&#34; class=&#34;section level2 tabset tabset-fade tabset-pills&#34;&gt;
&lt;h2&gt;What is power again? A &lt;del&gt;brief&lt;/del&gt; introduction&lt;/h2&gt;
&lt;p&gt;As my intention is to keep this post as short as possible (SPOILER: which definitely did not work), let’s directly dive into the topic by having a look at the definition of power:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If a certain effect of interest exists (e.g. a difference between two groups) power is the chance that we actually find the effect in a given study.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To provide some intuition about power, lets assume you toss a coin 10 times and you get 10 heads.
Should you be surprised about this?
Intuitively, it makes sense that we should be more surprised the more often we toss the coin and it keeps landing on head. 10 out of 10 heads would for example be less surprising than 10,000 out of 10,000, right?
This is exactly the question we want to answer when with power analysis&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;.
How often should we toss the coin until we are surprised enough to conclude that the coin is not fair.&lt;/p&gt;
&lt;p&gt;To translate the above situation into a Frequentist null-hypothesis significance testing (NHST) scenario, we hypothesize that the coin &lt;em&gt;is&lt;/em&gt; indeed fair (null-hypothesis) and see whether or not the observed number of heads (the observed data) fits with this hypothesis or not. If yes, we will retain the null-hypothesis that the coin is fair, if not, we will conclude that the data are very unlikely to result from tossing a fair coin.&lt;/p&gt;
&lt;p&gt;How do we do this?
Well, assume we observed 3 heads out of 3 total tosses.
Now we can count all ways that this could have happened with a fair coin and compare it to all possible outcomes that our coin toss experiment might have produced.
These possibilities are (for a fair coin or any coin that cannot produce only heads or only tails):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Possibility 1: HEAD-HEAD-HEAD&lt;/li&gt;
&lt;li&gt;Possibility 2: HEAD-HEAD-TAIL&lt;/li&gt;
&lt;li&gt;Possibility 3: HEAD-TAIL-TAIL&lt;/li&gt;
&lt;li&gt;Possibility 4: TAIL-TAIL-TAIL&lt;/li&gt;
&lt;li&gt;Possibility 5: TAIL-TAIL-HEAD&lt;/li&gt;
&lt;li&gt;Possibiltiy 6: TAIL-HEAD-HEAD&lt;/li&gt;
&lt;li&gt;Possibility 7: TAIL-HEAD-TAIL&lt;/li&gt;
&lt;li&gt;Possibility 8: HEAD-TAIL-HEAD&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notice that a possilibity is not only defined by the number of heads and tails but also by the order in which they occur&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;.
Now we see that only 1 order of events (Possibility 1) can produce 3 out of 3 heads.
If our coin is fair, each of these events should be equally likely and we can see that when flipping a fair coin 3 times, in only 1 out of 8 cases (12.5%) we will get 3 heads (Possibility 1).&lt;/p&gt;
&lt;p&gt;Do we find this surprising enough to conclude that the coin that we flipped is unfair?
Maybe, maybe not.
If not, instead of flipping the coin three times, we could flip it 100 times.
Imagine we observed 55 heads in 100 flips.
We could now start writing down all possible outcomes, but that would take some time.
This time, there are not 8 but &lt;span class=&#34;math inline&#34;&gt;\(2^{100}\)&lt;/span&gt; = 1,267,651,000,000,000,000,000,000,000,000 possible sequences of heads and tails, and we would have to count the ones that produce &lt;em&gt;at least&lt;/em&gt; 55 heads to see how often that would happen if our coin is fair&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, luckily we are not the first who are interested in these kind of problems and we can make use of mathematical formulas that other people figured out for us.&lt;/p&gt;
&lt;p&gt;Now the story gets a bit technical I’m afraid, and gets us back to stats 101 where we might have learned about &lt;em&gt;probability mass function.&lt;/em&gt; In this case we need the &lt;strong&gt;binomial&lt;/strong&gt; probability mass function.
In short, this function defines how often we can get each outcome, assuming a certain chance of getting heads or tails.
If you are interested in seeing this function and see how we can handcode it in &lt;code&gt;R&lt;/code&gt;, then click below.
If you do not want to get too much into the technicalities here, you can also just read on.&lt;/p&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;&lt;strong&gt;CLICK HERE FOR MORE ON BINOMIAL LIKELIHOOD&lt;/strong&gt;&lt;/summary&gt;
&lt;p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[P(x)=\frac{N!}{x!(N-x)!}\pi^x(1-\pi)^{N-x} \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;For people who are not used to mathematical formulas, this might already look intimidating. However, all we need to know right now is that this formula gives us the probability of getting x heads &lt;span class=&#34;math inline&#34;&gt;\(P{(x)}\)&lt;/span&gt; (i.e. the number of ways we get x heads divided by N tosses):
Note that &lt;span class=&#34;math inline&#34;&gt;\(\pi\)&lt;/span&gt; in the above formula is not the one we might know from geometry but it is simply the Greek letter for p denoting a probability here.
In this case, it is the probability of either event, heads or tails, happening on each toss so it is 50% or 0.5.
We can fill this in for the example above:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[P(55)=\frac{100!}{55!(100-55)!}0.5^{55}(1-0.5)^{100-55}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Translating this formula into &lt;code&gt;R&lt;/code&gt; syntax we get the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;factorial(100)/(factorial(55)*factorial(100-55))*0.5^55*(1-0.5)^(100-55)&lt;/code&gt; = 0.05&lt;/p&gt;
&lt;p&gt;However, before we said that we do not need the probability of &lt;em&gt;exactly&lt;/em&gt; 55 heads but everything that is &lt;em&gt;at least 55&lt;/em&gt;. In order to answer our question how often we get &lt;em&gt;at least&lt;/em&gt; 55 heads, we could repeat the above calculation with all values from 55 up until 100 and add up the probabilities that we get.&lt;/p&gt;
&lt;p&gt;For example we could do this with a for-loop:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# first we write a function that calculates the probability for each number so we can call it in a loop
pbinom2 &amp;lt;- function(N, x, p){
  factorial(N)/(factorial(x)*factorial(N-x))*p^x*(1-p)^(N-x)
}

tosses_55to100 &amp;lt;- c(55:100)  # we define the amount of heads that we want to check for (all bigger than or equal to 55)
probs &amp;lt;- c() # we will make an empty collection that we will add the results for each number of heads to

for(i in tosses_55to100){
  probs &amp;lt;- append(probs, pbinom2(100,i,.5))
}
print(probs[1:10])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 0.048474297 0.038952560 0.030068643 0.022292270 0.015869073 0.010843867
##  [7] 0.007110732 0.004472880 0.002697928 0.001559739&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we got all the probabilities for each of the amounts of heads that we are interested in.
By summing them up we get what we need - the probability of getting at least 55 heads in 100 tosses, &lt;code&gt;sum(probs)&lt;/code&gt; = 0.18 or 18 percent.&lt;/p&gt;
&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;As mentioned, fortunately, the counting of possibilities is pre-implemented into &lt;code&gt;R&lt;/code&gt;.
Running &lt;code&gt;pbinom(x = 54, size = 100, prob = .5, lower.tail = FALSE)&lt;/code&gt; (I will explain below) we can get R to calculate the proportion of samples that would result in &lt;em&gt;more than&lt;/em&gt; &lt;code&gt;x&lt;/code&gt; times heads in an experiment of &lt;code&gt;size&lt;/code&gt; 100 (i.e. tossing a coin 100 times).
Executing this in &lt;code&gt;R&lt;/code&gt; we get 0.18.&lt;/p&gt;
&lt;p&gt;In short, the &lt;code&gt;pbinom&lt;/code&gt; function gives us the answer to the question &#34;what is proportion of possible toss-sequences that results in more than &lt;code&gt;x = 54&lt;/code&gt;&lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; heads if we toss a coin &lt;code&gt;size=100&lt;/code&gt; times if our hypothesis is that the coin is fair with a probability of heads of &lt;code&gt;prob = .5&lt;/code&gt;.
The &lt;code&gt;lower.tail = FALSE&lt;/code&gt; argument tells &lt;code&gt;R&lt;/code&gt; that we want the the probability of the upper part of the probability mass (i.e. the probability of getting 55 or more heads rather than 54 or less).
In other words, every 6th out of the &lt;span class=&#34;math inline&#34;&gt;\(2^{100}\)&lt;/span&gt; possible sequences has 55 or more heads.
Again, this is not really surprising and would probably not make us conclude that a coin is definitely unfair.&lt;/p&gt;
&lt;p&gt;If, for example, we think that a coin is unfair if the amount of heads (or more heads) has only a probability of .01 or 1 percent, what amount of heads would allow us to draw such a conclusion when tossing a coin 100 times?
To solve this, we can just use the &lt;code&gt;pbinom&lt;/code&gt; function for not only &lt;code&gt;x = 55&lt;/code&gt; heads but also 56 up to 100 heads, and see from which point onwards only 1 percent of all &lt;span class=&#34;math inline&#34;&gt;\(2^{100}\)&lt;/span&gt; sequences include so many heads.&lt;/p&gt;
&lt;p&gt;The code below does exactly this.
Conveniently the &lt;code&gt;pbinom&lt;/code&gt; function cannot only evaluate 1 value at the same time but we can just pass all values that we want to try as a sequence and it will give us the probability of &lt;code&gt;x&lt;/code&gt; heads for each of them so we can store them as a collection of values.
We can plot these values to see when we cross the 1 percent line.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n_heads &amp;lt;- 54:99  # all possible amount of heads that we want to try.

p_heads &amp;lt;- pbinom(q = n_heads, size = 100, prob = .5, lower.tail = F)  # get pbinom to show us the probability of so many heads for each of the values if a coin is fair

plot(n_heads, p_heads)
abline(h = .01)
abline(v = n_heads[p_heads &amp;lt; .01][1])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;2020-01-20-power-analysis-by-data-simulation-in-r-part-i_files/figure-html/caclulate_p1percent-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Using the above we see that the at 62 tosses, i.e. the 9th element of the vector is the first probability that is smaller than .01, in this case 0.006.
In other words, getting 62 or more heads in 100 tosses would only happen extremely rarely, in 1 out of 62 cases.
Thus actually getting 62 heads is pretty surprising and if something like that happened we might conclude that a coin is unfair.&lt;/p&gt;
&lt;p&gt;However, instead of following the approach above, there is an easier way to get the number of heads that would surprise us by using the &lt;code&gt;qbinom&lt;/code&gt; function that gives us the quantile (i.e. number of heads or more heads) that would only happen with a certain probability: &lt;code&gt;qbinom(p = .01, size = 100, prob = .5, lower.tail = FALSE)&lt;/code&gt; = 62, unsurprisingly gives us the same result.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;back-to-power&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Back to Power&lt;/h1&gt;
&lt;p&gt;But what is the &lt;strong&gt;power&lt;/strong&gt; of the test here (in case you forgot during my very long “brief” introduction, this post was about power)?&lt;/p&gt;
&lt;p&gt;In the example above we already used three concepts from frequentist statistical testing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;null-hypothesis&lt;/strong&gt;: we assumed that the coin is fair&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;p-value&lt;/strong&gt; : the probability that we calculated above when checking how likely 62 or more heads are (we got 0.006).&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;alpha level&lt;/strong&gt; : (i.e. where people conventionally use .05 in psychological literature&lt;a href=&#34;#fn5&#34; class=&#34;footnote-ref&#34; id=&#34;fnref5&#34;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;) is the threshold that we picked for concluding it would surprise us enough to say that the coin must be unfair, i.e. the probability of .01. In other words, it is the chance that we conclude that a coin is unfair even if it is actually fair (the one percent of cases where 62 or more heads would happen even with a fair coin).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In a proper power analysis, all of these need to be specified in addition to an &lt;em&gt;alternative hypothesis&lt;/em&gt;.&lt;/p&gt;
&lt;div id=&#34;specifying-the-null-hypothesis.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Specifying the null-hypothesis.&lt;/h2&gt;
&lt;p&gt;Again, we will assume that a coin is fair and will produce heads with a probability of .50&lt;a href=&#34;#fn6&#34; class=&#34;footnote-ref&#34; id=&#34;fnref6&#34;&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;specyfing-the-alternative-hypothesis-aka-effect-size.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Specyfing the Alternative Hypothesis aka Effect Size.&lt;/h2&gt;
&lt;p&gt;To conduct a proper power-analysis, it is important that we specify a concrete &lt;em&gt;alternative hypothesis&lt;/em&gt; (or effect size).
If we do know have a hypothesis about the effect size, we can &lt;em&gt;by definition&lt;/em&gt; not define the power to investigate this hypothesis.
Makes sense, right?
In most software packages, you will use effect-size estimates like Cohen’s d or f or other &lt;em&gt;standardized effect sizes&lt;/em&gt;.&lt;a href=&#34;#fn7&#34; class=&#34;footnote-ref&#34; id=&#34;fnref7&#34;&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here, we will follow a different approach by trying to specify our hypothesis, the expected effect size, on the &lt;em&gt;raw&lt;/em&gt; scale.
This means we will try to think about an effect size that would be meaningful in this coin flip example.
For instance, if you use the coin to make an important decision, i.e. when the fairness of the coin is very important (see e.g. &lt;a id=&#34;Figure-3-Ref&#34; href=&#34;#Figure-3&#34;&gt;Figure 3&lt;/a&gt;)&lt;a href=&#34;#fn8&#34; class=&#34;footnote-ref&#34; id=&#34;fnref8&#34;&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt; you would probably want to be very strict about when a coin is unfair and would like to, for instance, already conclude that it is unfair at 55% percent heads, a deviation from a truly fair coin of 5%.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;specifying-the-alpha-level&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Specifying the alpha-level&lt;/h2&gt;
&lt;p&gt;Furthermore, as it does not deem you a good idea to get into a fight with Harvey by incorrectly accusing him of using an unfair coin, you want the chance of this happening (i.e. the alpha-level) to be very low at only 0.1 percent (1 in a 1000 cases)&lt;a href=&#34;#fn9&#34; class=&#34;footnote-ref&#34; id=&#34;fnref9&#34;&gt;&lt;sup&gt;9&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;specyfing-the-desired-power&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Specyfing the desired power&lt;/h2&gt;
&lt;p&gt;Moreover, you also want to be sure that you &lt;em&gt;would&lt;/em&gt; detect the unfairness of 55% if it is actually there.
Let’s say you only want to have a 10 percent chance of not detecting it if it was there.
100 minus this chance is the &lt;em&gt;power&lt;/em&gt; of our coin-toss study, i.e. 90 percent (or 1-.10 on the probability scale).&lt;/p&gt;
&lt;a id=&#34;Figure-3&#34;&gt;
&lt;figure&gt;
&lt;img src=&#34;https://media1.tenor.com/images/507d58a626fa15cb0b57e57f7a1cb873/tenor.gif?itemid=9698651&#34; width=&#34;500&#34;/&gt;
&lt;figcaption&gt;
&lt;em&gt;Figure 3. An illustrative example of when a coin-toss really matters.&lt;/em&gt;&lt;a href=&#34;#Figure-3-Ref&#34;&gt;↩&lt;/a&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To summarize, our test has the following properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;alpha-level = .001&lt;/li&gt;
&lt;li&gt;alternative hypothesis (aka effect size / fairness-criterion) = 55% heads&lt;/li&gt;
&lt;li&gt;power = .90&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our job now is to figure out at which number of tosses we can be 90% sure to detect the unfairness of 55% with only a 0.1% chance of getting into a fight with Harvey by wrongly accusing him of unfairness.&lt;/p&gt;
&lt;p&gt;To do this we can use the following r-code (I will explain below)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-first-power-calculation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The first Power Calculation&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;power_at_n &amp;lt;- c(0) # initialize vector that stores power for each number of tosses
n_heads &amp;lt;- c() # save &amp;quot;critical&amp;quot; number of heads for that toss-amount that would result 
n_toss &amp;lt;- 2 # initialize the toss-counter
while(power_at_n[n_toss-1] &amp;lt; .90){ # continue as long as power is not 90%
  n_heads[n_toss] &amp;lt;- qbinom(.001, n_toss, .5, lower.tail = F) # retrieve critical value
  power_at_n[n_toss] &amp;lt;- pbinom(n_heads[n_toss], n_toss, .55, lower.tail = F) # calculate power (1-beta) for each coin-toss
  n_toss &amp;lt;- n_toss+1 # increase toss-number 
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above loop needs some explanation.
It increases the toss-amount &lt;code&gt;n_toss&lt;/code&gt; by 1 as long as it has not yet reached 90% power.
To do this, we again use the &lt;code&gt;qbinom&lt;/code&gt; function to find the number of heads (or more heads) that would only occur with a probability of .001.
In other words, only 0.1% of the possible coin toss sequences would result in that specific amount of heads when tossing the coin &lt;code&gt;n_toss&lt;/code&gt; times.
This is the same thing we did earlier with a fixed amount of 100 tosses.&lt;/p&gt;
&lt;p&gt;in the next line, we take this amount of heads that only occurs with a probabiltiy of .001 for the current toss amount &lt;code&gt;n_toss&lt;/code&gt; and use &lt;code&gt;pbinom&lt;/code&gt; to calculate the probability of getting &lt;em&gt;at least&lt;/em&gt; this many heads with our hypothesized &lt;em&gt;unfair&lt;/em&gt; coin that produces heads in 55% of the cases.
This means, we calculate the percentage of coin toss sequences that contain at least this many heads.
This probability is the &lt;strong&gt;power&lt;/strong&gt; of the test.
Why?
Because if 90% of the sequences contain 55% or more heads, if we take the coin and toss it &lt;code&gt;n_toss&lt;/code&gt; times,in 90% of the cases we will get one of those sequences that contain 55% or more heads.&lt;/p&gt;
&lt;p&gt;Lets have a look at two of the values from this calculation to make this more clear.
For instance, lets look at the values when the loop tried out 100 tosses:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;n_heads[100]&lt;/code&gt; = 65. This number is higher than the 62 heads we had above, as we are more strict now by specifying a stricter alpha level (.001 instead of .01).
Next, this 65 was passed on to the &lt;code&gt;pbinom&lt;/code&gt; function and we can look at the power, &lt;code&gt;power_at_n[100]&lt;/code&gt; = 0.02.
At this point we only have a power of .02 or 2%.
This means that tossing an unfair coin that would give 55% heads 100 times, only 2% of the sequences would contain 55 or more heads, therfore making it unlikely that we would detect the unfairness.
When we increase the number of tosses until the loop stops, we are at &lt;code&gt;n_toss-1&lt;/code&gt; = 1908 coin tosses.
At this number of tosses, the amount of heads that would make us conclude that a fair coin is unfair (biased with 55% heads) with only 0.1% chance of being wrong is &lt;code&gt;n_heads-[n_toss-1]&lt;/code&gt; = 1021.
Thus in this case, with 1908 tosses, if we get 1021 heads or more, we conclude that the coin is unfair.
What is the chance of getting at least that with our &lt;em&gt;unfair&lt;/em&gt; coin?
That’s what the &lt;code&gt;pbinom&lt;/code&gt; function in the loop above tells us and it is &lt;code&gt;power_at_n[n_toss-1]&lt;/code&gt; = 0.9, our specified 90%.
We can also plot the power for each number of tosses that we tried in the loop.
Figure 4 shows the increase in power with increasing sample-size.&lt;/p&gt;
&lt;a id=&#34;Figure-4&#34;&gt;
&lt;figure&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(1:(n_toss-1), power_at_n, xlab = &amp;quot;Number of coin-tosses&amp;quot;, ylab = &amp;quot;Power&amp;quot;, axes = FALSE)
abline(h = .90, col = &amp;quot;red&amp;quot;)
axis(side = 1, at = seq(0,(n_toss-1),by=100))
axis(side = 2, at = seq(0,1,by=0.1))&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;2020-01-20-power-analysis-by-data-simulation-in-r-part-i_files/figure-html/power-curve1-1.png&#34; width=&#34;672&#34; /&gt;
&lt;figcaption&gt;
&lt;em&gt;Figure 4. Change in power until we reach 90% indicated by the red horizontal line.&lt;/em&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thus, when tossing a coin 1908 times, in 90% of the cases we will be able to tell it’s biased and can confidently confront Harvey like shown in Figure 5.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;https://i.redd.it/wyklemmf5zz11.png&#34; alt=&#34;confronting-harvey&#34; width=&#34;500&#34;/&gt;
&lt;figcaption&gt;
&lt;em&gt;Figure 5. Confronting Harvey and telling him what we think about his coin.&lt;/em&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;If you are not familiar with using these distribution functions (&lt;code&gt;qbinom&lt;/code&gt;, &lt;code&gt;pbinom&lt;/code&gt; etc.) in &lt;code&gt;R&lt;/code&gt;, this might have been a lot of new information but this is basically what we do in power analysis:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;We specify a null-hypothesis, an alternative hypothesis, an alpha-level and a desired power,&lt;/li&gt;
&lt;li&gt;We try a small sample-size.&lt;/li&gt;
&lt;li&gt;We retrieve the critical value, (the number of heads that would be more surprising than what we specified as our alpha-level).&lt;/li&gt;
&lt;li&gt;We calculate the probability that the amount of heads that would make us reject the null-hypothesis would be observed with the unfair coin according to the alternative hypothesis.&lt;/li&gt;
&lt;li&gt;We stop as soon as this probability is equal to the desired power.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;finally-an-actual-power-simulation.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Finally, an actual power simulation.&lt;/h1&gt;
&lt;p&gt;So far, we have not done any simulation but have merely analytically derived the power by making use of the binomial probability mass function&lt;a href=&#34;#fn10&#34; class=&#34;footnote-ref&#34; id=&#34;fnref10&#34;&gt;&lt;sup&gt;10&lt;/sup&gt;&lt;/a&gt;.
Thus, for easy toy-examples like this one we would not need to do a simulation.
However, as soon as we deal with real examples, it is much more difficult to make use of this approach and if we have several predictors in our model, or if we deal with mixed-effect models or hierarchical models (as we will do in part IV of this tutorial) the above method is not feasible anymore.&lt;/p&gt;
&lt;p&gt;What we can do however, for any model of any complexity and form, is to actually pretend we were repeatedly doing the experiment for each sample size and see how often we would be able to reject the null-hypothesis.
For instance we could toss a coin 20 times and test whether we would reject the null-hypothesis.
We could then repeat this process for 20 tosses very often, e.g. 1,000 times and see what the probability is that we would conclude that the null-hypothesis is false&lt;a href=&#34;#fn11&#34; class=&#34;footnote-ref&#34; id=&#34;fnref11&#34;&gt;&lt;sup&gt;11&lt;/sup&gt;&lt;/a&gt;.
This is what we do in power-simulation.&lt;/p&gt;
&lt;p&gt;An obvious disadvantage is that instead of just calculating the power for each toss-amount (i.e. sample-size) only once, we need to try each toss-amount out 1,000 times.
Thus, simulation takes much longer than a regular power-calculation, especially with more complex models and high sample-sizes.
However, the advantage of the method is that we can just learn it once and adjust it for any situation that we will ever find ourselves in, not having to ever walk through tedious interfaces again, selecting arbitrary analyses and setting ever changing parameters to certain values.
Another advantage (that will be discussed in detail later) is that we do not need to specify a precise alternative hypothesis and test it for that single value, but that we can actually remain more vague about what our alternative hypothesis (i.e. the effect size that we expect) will be.
Oftentimes we do not know exactly what effect-size we can expect and we might like to tell the power-analysis about this uncertainty.&lt;/p&gt;
&lt;p&gt;At last, let us do a power-simulation for the above example.
Luckily we do not really have to toss a coin as &lt;code&gt;R&lt;/code&gt; can do that for us by using the &lt;code&gt;rbinom&lt;/code&gt; function, that will as often as we call it do a coin-tossing experiment for us with a specified sample-size.
Lets first see how the &lt;code&gt;rbinom&lt;/code&gt; function works if we would want to toss a coin 20 times.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1) # make sure our simulation will give the same results if you try it
rbinom(n = 1, size = 20, prob = .50) # let r do 1 experiment with 20 coin tosses of a fair coin&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above code, &lt;code&gt;R&lt;/code&gt; tossed a coin 20 times and it resulted in 9 heads.
We could repeat this experiment again:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(2) # make sure our simulation will give other results than before
rbinom(n = 1, size = 20, prob = .5) # run the experiment again&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, giving us 8 heads.
By increasing the first argument to the &lt;code&gt;rbinom&lt;/code&gt; function, we can tell &lt;code&gt;R&lt;/code&gt; to repeat this experiment more often.
Moreover, we can tell it to make use of an unfair coin directly, so we can directly put our alternative hypothesis in the simulation by changing the last number of the &lt;code&gt;rbinom&lt;/code&gt; function from .50 to .55, to do the same test as above.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1)
n_heads &amp;lt;- rbinom(n = 1000, size = 20, prob = .55) # run 1,000 experiments, of 20 coin tosses each, at once
str(n_heads) # show structure of vector&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  int [1:1000] 12 12 11 8 13 8 7 10 10 14 ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, &lt;code&gt;R&lt;/code&gt; repeated the 20 coin-toss experiment 1,000 times with an unfair coin of 55% chance of resulting in heads giving us 1,000 times the amount of heads that it got.
Let us again now test how big our power was in this case if we made the same assumptions of above, i.e. 90% power with an alpha-level of .001.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p_heads &amp;lt;- pbinom(n_heads, 20, .50, lower.tail = F) # calculate the probability of observing this many heads if the coin would be fair (which it is not cause we simulated with 55% heads)

exp_power &amp;lt;- mean(p_heads &amp;lt; .001) # check where this chance drops below our alpha level&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first line in the above code does exactly what we did earlier, just with a little change.
We take the amounts of heads that we got from an unfair coin, and check in how many cases we would conclude - assuming that the coin would actually be fair, thus using .50 as the probability in &lt;code&gt;pbinom&lt;/code&gt; - that the observed amounts of heads is too unlikely for us to believe that the coin was fair.
We save these probabilities to a vector.
The second line calculates the observed power of our experiment.
To understand what it does, let us have a look at the vector p_heads it looks the following (here only the first 10 out of 1,000 values):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p_heads[1:10]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 0.13158798 0.13158798 0.25172234 0.74827766 0.05765915 0.74827766
##  [7] 0.86841202 0.41190147 0.41190147 0.02069473&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As shown above, the &lt;code&gt;p_heads&lt;/code&gt; vector contains the probability of observing each amount of heads &lt;code&gt;n_heads&lt;/code&gt; from our 1,000 experiments assuming the experiment was done with a fair coin (which it was not).
Now we would like to check how many of these probabilities are at least as small as our alpha-level, i.e. surprising enough to conclude the coin was not fair.
We do this by checking for each value whether it was .001 or smaller (&lt;code&gt;p_heads &amp;lt; .001&lt;/code&gt;).
This will result in another vector of 0 when the condition is false and 1 when the condition is true&lt;a href=&#34;#fn12&#34; class=&#34;footnote-ref&#34; id=&#34;fnref12&#34;&gt;&lt;sup&gt;12&lt;/sup&gt;&lt;/a&gt;.
Taking the mean of this vector will give us the probability of rejecting the null-hypothesis while we actually know it is incorrect (as we put the bias in the coin ourselves).
Again, this will give us the power.
In the present case with 20 coin-tosses the power is &lt;code&gt;exp_power&lt;/code&gt; = 0.004 or 0.4 percent.
This is obviously very low and not surprising given that we already know from the calculation above that we need a lot more coin-tosses than 20 to get the desired power of 90%.
To get to our desired power in this example, we need to change the code above so it will try different sample-sizes again.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1)
exp_power_at_n &amp;lt;- c(0) # create a vector where we can store the power for each sample-size
n_toss_start &amp;lt;- 19 # start at 21 tosses
n_toss_loop &amp;lt;- 2 # additional number of tosses tried (above 20)
while(exp_power_at_n[n_toss_loop-1] &amp;lt; .90){ # continue increasing the sample-size until power = 90%
  n_toss &amp;lt;- n_toss_start+n_toss_loop # calculate the current number of tosses
  n_heads &amp;lt;- rbinom(1000, n_toss, .55) # run 1000 experiments for any given number of tosses and store number of heads
  p_heads &amp;lt;- pbinom(n_heads, n_toss, .50, lower.tail = F) # calculate the probability of getting at least that many heads if the coin would be fair 
  exp_power_at_n[n_toss_loop] &amp;lt;- mean(p_heads &amp;lt; .001) # calculate power by checking what proportion of the probabilities is smaller than or equal to our alpha-level
  n_toss_loop = n_toss_loop+1
}

exp_power_at_n &amp;lt;- exp_power_at_n[-1] # remove the first 0 that we used to populate the vector for the first iteration of the loop&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above code is similar to what we have done earlier when we tried only 1 sample-size.
This time, we iterate over different sample-sizes in a loop and store the power for each in the vector &lt;code&gt;exp_power_at_n&lt;/code&gt;.
As in the earlier calculation, we can now use this to see how many tosses we would need by having a look at where the loop stopped, i.e. when it reached 90% power, which is at &lt;code&gt;n_toss-1&lt;/code&gt; = 1795 tosses at which the power was &lt;code&gt;exp_power_at_n[length(exp_power_at_n)]&lt;/code&gt; = 0.903.
We can also plot all these values again as done in Figure 6.&lt;/p&gt;
&lt;figure&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(21:n_toss, exp_power_at_n, xlab = &amp;quot;Number of coin-tosses&amp;quot;, ylab = &amp;quot;Power&amp;quot;, ylim = c(0,1), axes = FALSE)
abline(h = .90, col = &amp;quot;red&amp;quot;)
axis(side = 1, at = seq(0,(n_toss),by=100))
axis(side = 2, at = seq(0,1,by=0.1))&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;2020-01-20-power-analysis-by-data-simulation-in-r-part-i_files/figure-html/figure6-1.png&#34; width=&#34;672&#34; /&gt;
&lt;figcaption&gt;
&lt;em&gt;Figure 6. Observed power in the simulation.&lt;/em&gt;
&lt;/figcaption&gt;
&lt;figure&gt;
&lt;p&gt;The shape of the line looks very similar to the earlier calculation, however the line appears to be thicker.
Moreover, it might be surprising that we did not get the same amount of tosses that we got from the calculation.
Actually they differ quite a lot (1908 vs. 1795).
This is due to the fact that even when running 1,000 experiments for each sample-size there is still imprecision in the simulation.
Each coin-flip is random and even if we repeat a experiment 1,000 times this randomness is still in there (think of how many possible sequences there would be!).
This randomness is why we cat a different number in the simulation and why the line in Figure 6 is thicker than in &lt;a href=&#34;#Figure-4&#34;&gt;Figure 4&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If we want to approach the results of the calculation more closely in our simulation (i.e. get a more precise power-estimate) we can increase the number of experiments that &lt;code&gt;R&lt;/code&gt; will run per sample-size (i.e. the number of simulations).
For example, we could repeat the simulation with 100,000 experiments per sample-size.
You have to be patient here, this already takes a few minutes maybe.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1)
exp_power_at_n &amp;lt;- c(0) # create a vector where we can store the power for each sample-size
n_toss_start &amp;lt;- 19 # start at 21 tosses
n_toss_loop &amp;lt;- 2 # additional number of tosses tried (above 20)
while(exp_power_at_n[n_toss_loop-1] &amp;lt; .90){ # continue increasing the sample-size until power = 90%
  n_toss &amp;lt;- n_toss_start+n_toss_loop # calculate the current number of tosses
  n_heads &amp;lt;- rbinom(100000, n_toss, .55) # run 1000 experiments for any given number of tosses and store number of heads
  p_heads &amp;lt;- pbinom(n_heads, n_toss, .50, lower.tail = F) # calculate the probability of getting at least that many heads if the coin would be fair 
  exp_power_at_n[n_toss_loop] &amp;lt;- mean(p_heads &amp;lt; .001) # calculate power by checking what proportion of the probabilities is smaller than or equal to our alpha-level
  n_toss_loop = n_toss_loop+1
}

exp_power_at_n &amp;lt;- exp_power_at_n[-1] # remove the first 0 that we used to populate the vector for the first iteration of the loop&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you run this code, you will see that it took substantially longer than the previous simulation with only 1,000 repetitions.
If we now look at the outcome again we find that the number of tosses &lt;code&gt;n_toss-1&lt;/code&gt; = 1870 is already slightly closer to the calculated value but still not exactly the same.
In my personal opinion, this imprecision is both advantage of simulation as well as disadvantage.
It is a disadvantage in that it is less precise than the calculation above in theory.
However, it is an advantage as it adds some noise to the power-estimation process that is actually also present in real life.
This is, even if there is an effect in the population, each new sample will always be different which is also the case in the simulation.
If we look at Figure 7, we also see that now the power-increase follows a more straight line again that is very close to the one from the exact calculation and not as thick anymore as in Figure 6.&lt;/p&gt;
&lt;figure&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(21:n_toss, exp_power_at_n, xlab = &amp;quot;Number of coin-tosses&amp;quot;, ylab = &amp;quot;Power&amp;quot;, ylim = c(0,1), axes = FALSE)
abline(h = .90, col = &amp;quot;red&amp;quot;)
axis(side = 1, at = seq(0,(n_toss),by=100))
axis(side = 2, at = seq(0,1,by=0.1))&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;2020-01-20-power-analysis-by-data-simulation-in-r-part-i_files/figure-html/figure7-1.png&#34; width=&#34;672&#34; /&gt;
&lt;figcaption&gt;
&lt;em&gt;Figure 7. Power curve for a more precise simulation.&lt;/em&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Summary&lt;/h1&gt;
&lt;p&gt;In this part of the tutorial I tried to bring us all on the same page about why we would do data or power simulation and how it is related to exact power calculation.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In principle, in power calculation we count the amount of potential data sequences (e.g. possible sequences of HEADS-TAILS in coin-tosses) that could happen in an experiment of a specific size (e.g. amount of coin-tosses).&lt;/li&gt;
&lt;li&gt;Afterwards, we calculate the critical value (e.g. number of heads) that would make us reject the null-hypothesis (e.g. a coin is fair) as only a very small percentage of sequences (“small” is defined by the alpha-level here) would surpass the critical value.&lt;/li&gt;
&lt;li&gt;Finally, we calculate the percentage of sequences according to the alternative hypothesis (e.g. a coin is unfair with a bias of 55%) that would surpass the critical value.
This is the power of our test.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In power-simulation we do something very similar, but instead of calculating how many possible data sequences there are and how many of them result in a critical value, we just &lt;strong&gt;try&lt;/strong&gt; this out a lot of times until we get an approximation of how often we would observe data that are inconsistent with the null-hypothesis given our specified alpha-level.&lt;/p&gt;
&lt;p&gt;I hope you forgive my rather lengthy introduction on power-analysis before actually doing the simulation, as I thought it would be a good foundation before we move on to more complex and realistic situations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In part II of this tutorial, we will move on to these more realistic situations that we might actually be interested in psychology by looking at how we do simulations for t-tests.&lt;/li&gt;
&lt;li&gt;In part III we will continue with ANOVA and regression designs.&lt;/li&gt;
&lt;li&gt;In part IV we will look at mixed-effects/multilevel models.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Footnotes&lt;/h1&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;The answer to the question - &lt;em&gt;Should we be surprised&lt;/em&gt; - is basically what we get when we do a statistical test and inspect the p-value.
Ok, this is not exactly true but p-values &lt;em&gt;can&lt;/em&gt; actually be expressed in terms of how surprised we should be about an observation, given a certain hypothesis (e.g. when we assume no difference between groups as the null-hypothesis).
To read an awesome explanation about this, look at &lt;a href=&#34;https://lesslikely.com/statistics/s-values/&#34;&gt;this&lt;/a&gt; really cool blog-post about &lt;em&gt;s-values&lt;/em&gt; by &lt;a href=&#34;https://twitter.com/dailyzad&#34;&gt;Zad Chow&lt;/a&gt;.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;Why is the order important here?
Because orders do identify unique outcomes.
If we do not consider entire sequences, we might be inclined to think that there are only four possibilities: 3xHEADS, 2xHEADS, 1xHEADS and 0xHEADS, and that each of these events is equally likely.
However, how likely eah of these events is depends on how many different sequences can produce it.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;I looked it up and apparently this number (a one followed by 30 zeros) is called a &lt;em&gt;Nonillion&lt;/em&gt;. It is so big, that apparently the number of bacterial cells on earth is estimated at &lt;a href=&#34;https://www.pnas.org/content/95/12/6578&#34;&gt;5 Nonillion&lt;/a&gt;.
So I do not recommend trying to write down all possibilities…&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;&lt;code&gt;R&lt;/code&gt; excludes the first number here, so that is why we start at 54 rather than 55&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn5&#34;&gt;&lt;p&gt;Notice however, that this alpha-level of .05 implies that we are surprised enough if something only happens in 1 out of 20 cases.
There have, however, been repeated calls to &lt;a href=&#34;https://www.nature.com/articles/s41562%20017%200189%20z&#34;&gt;change the standard alpha-level&lt;/a&gt;, to &lt;a href=&#34;https://www.nature.com/articles/s41562-018-0311-x&#34;&gt;justify it based on the specific situation you are in&lt;/a&gt; or to &lt;a href=&#34;https://arxiv.org/abs/1709.07588&#34;&gt;abandon it all together&lt;/a&gt; alongside other ideas of using alternatives like the &lt;a href=&#34;https://link.springer.com/article/10.3758/s13423-011-0088-7&#34;&gt;Bayes-Factor&lt;/a&gt;.
For the most part, in this tutorial I will try to justify the alpha that I choose and to stay away from the “magical” .05 as I agree with the justification approach in that we should at least &lt;em&gt;try&lt;/em&gt; and think harder about the alpha-level and it’s meaning.&lt;a href=&#34;#fnref5&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn6&#34;&gt;&lt;p&gt;It might be confusing that i say “specify” a null-hypothesis here.
Is the null-hypothesis not by definition that there is no difference, i.e. that the coin is fair at 50%.
Well, yes and no.
Of course assuming coin-fairness is the most logical thing to do here but in real life, no matter what research question you are investigating, you will close to &lt;em&gt;always&lt;/em&gt; find a difference between groups.
If you keep increasing the sample size, at some point the effect will always be significant, no matter how small the deviation is.
This is, we could even find the unfairness of the coin if it is only 51%.
But is this 51% really big enough to care about?
Maybe, maybe not, but we can define a &lt;em&gt;smallest effect size of interest&lt;/em&gt; and use &lt;em&gt;Equivalance testing&lt;/em&gt; in which the null-hypothesis is a certain range of small deviations from the actual point of no-difference in which we say that the effect is too small to care about.
Equivalence testing is not new but surprisingly unknown and/or uncommon in the psychological literature.
If you are interested in Equivalence Testing, you should check out the great &lt;a href=&#34;https://journals.sagepub.com/doi/10.1177/2515245918770963&#34;&gt;paper(s)&lt;/a&gt; and &lt;a href=&#34;http://daniellakens.blogspot.com/2018/08/equivalence-testing-and-second.html&#34;&gt;blog-post(s)&lt;/a&gt; about it by &lt;a href=&#34;http://daniellakens.blogspot.com/&#34;&gt;Daniel Lakens&lt;/a&gt; and colleagues.&lt;a href=&#34;#fnref6&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn7&#34;&gt;&lt;p&gt;Software like G*Power often uses different standardized effect sizes for different anaylses.
However, in many cases standardized effect-sizes can be converted into each other.
If you ever need to do such a thing, &lt;a href=&#34;http://hauselin.com&#34;&gt;Hause Lin&lt;/a&gt; made a nice &lt;a href=&#34;http://escal.site/&#34;&gt;conversion app&lt;/a&gt;.&lt;a href=&#34;#fnref7&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn8&#34;&gt;&lt;p&gt;For those unfamiliar with this reference: First, consider watching Dark Knight, it’s a great movie. Second, this character (Harvey Dent, a former state lawyer) decides whether or not to sentence (kill) people by tossing a coin.&lt;a href=&#34;#fnref8&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn9&#34;&gt;&lt;p&gt;Thereby justifying our alpha-level in this toy example.&lt;a href=&#34;#fnref9&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn10&#34;&gt;&lt;p&gt;You can see that is it not a simulation as you will always get the &lt;em&gt;exact same&lt;/em&gt; result whenever you run the code above.&lt;a href=&#34;#fnref10&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn11&#34;&gt;&lt;p&gt;In other words, instead of writing all possible coin-toss sequences down and counting how many of them would produce 55% heads with a certain amount of tosses, we could just run very many experiments in which we for example throw a coin 20 times.
If we repeat these 20 tosses 1,000 times, we get an approximation of how many heads the toss sequences produce on average.&lt;a href=&#34;#fnref11&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn12&#34;&gt;&lt;p&gt;Technically the vector contains FALSE instead of 0 and TRUE instead of 1. However, in R, and many other programming languages, the two are interchangable, allowing us to calculate the mean in the same way.&lt;a href=&#34;#fnref12&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
